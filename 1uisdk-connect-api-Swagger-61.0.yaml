{
  "openapi": "3.0.0",
  "info": {
    "title": "Salesforce Connect API",
    "version": "61.0",
    "description": ""
  },
  "servers": [],
  "paths": {
    "/graphql": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GraphQLRepresentation"
                }
              }
            }
          }
        },
        "description": "Execute a GraphQL query.",
        "operationId": "POST_graphql",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GraphQLInputRepresentation"
              }
            }
          },
          "required": false
        }
      }
    },
    "/graphql/batch": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Post a batch graphQL request.",
        "operationId": "POST_graphql-batch",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GraphQLBatchInputRepresentation"
              }
            }
          },
          "required": false
        }
      }
    },
    "/ui-api/actions/flexipage/{flexipageNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific flexipageNames.",
        "operationId": "GET_ui-api-actions-flexipage-flexipageNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "flexipageNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/formula-activation/{actionFeature}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FlexipageFormulaActivationRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve formula activations for given Feature, Application and sObject",
        "operationId": "GET_ui-api-actions-formula-activation-actionFeature",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "actionFeature",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "objectApiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/global": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data for Global context.",
        "operationId": "GET_ui-api-actions-global",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/layout/{actionApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QuickActionLayoutRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a Quick Action layout.",
        "operationId": "GET_ui-api-actions-layout-actionApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "actionApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/actions/list-view-chart/{objectApiNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific list-view-chart objectApiNames.",
        "operationId": "GET_ui-api-actions-list-view-chart-objectApiNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/list-view-record/{recordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordIds.",
        "operationId": "GET_ui-api-actions-list-view-record-recordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/list-view/{listViewIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific list-view listViewIds.",
        "operationId": "GET_ui-api-actions-list-view-listViewIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/lookup/{objectApiNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific lookup objectApiNames.",
        "operationId": "GET_ui-api-actions-lookup-objectApiNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/mru-list/{objectApiNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific mru-list objectApiNames.",
        "operationId": "GET_ui-api-actions-mru-list-objectApiNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/object/{objectApiName}/record-create": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific objectApiName under the RecordCreate subcontext.",
        "operationId": "GET_ui-api-actions-object-objectApiName-record-create",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/overrides/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionOverrideRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve evaluatable rules and flexipage names",
        "operationId": "GET_ui-api-actions-overrides-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "defaultTemplateOnly",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/actions/perform-quick-action/{actionApiName}": {
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QuickActionExecutionRepresentation"
                }
              }
            }
          }
        },
        "description": "performing a quick action that updates a record.",
        "operationId": "PATCH_ui-api-actions-perform-quick-action-actionApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PerformActionInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "actionApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QuickActionExecutionRepresentation"
                }
              }
            }
          }
        },
        "description": "performing a quick action.",
        "operationId": "POST_ui-api-actions-perform-quick-action-actionApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PerformActionInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "actionApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/actions/photo/{recordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data for photo of recorIds.",
        "operationId": "GET_ui-api-actions-photo-recordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record-defaults/{actionApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QuickActionDefaultsRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a quick action default values.",
        "operationId": "GET_ui-api-actions-record-defaults-actionApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "actionApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "parentRecordId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordIds.",
        "operationId": "GET_ui-api-actions-record-recordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}/record-edit": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordId under the RecordEdit subcontext.",
        "operationId": "GET_ui-api-actions-record-recordIds-record-edit",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}/related-list": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordId for the RelatedList subcontexts relatedListIds.",
        "operationId": "GET_ui-api-actions-record-recordIds-related-list",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a related list.",
        "operationId": "POST_ui-api-actions-record-recordIds-related-list",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}/related-list-record/{relatedListRecordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordId under the related-list-record relatedListRecordIds.",
        "operationId": "GET_ui-api-actions-record-recordIds-related-list-record-relatedListRecordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "relatedListRecordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}/related-list/batch": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordId for the RelatedList subcontexts relatedListIds but returned in the manner LDS expects for batching.",
        "operationId": "GET_ui-api-actions-record-recordIds-related-list-batch",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns a batch of record data to populate several related lists.",
        "operationId": "POST_ui-api-actions-record-recordIds-related-list-batch",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionRelatedListsBatchInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}/related-list/batch/{relatedListIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordId for the RelatedList subcontexts relatedListIds but returned in the manner LDS expects for batching.",
        "operationId": "GET_ui-api-actions-record-recordIds-related-list-batch-relatedListIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "relatedListIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns a batch of record data to populate several related lists.",
        "operationId": "POST_ui-api-actions-record-recordIds-related-list-batch-relatedListIds",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionRelatedListsBatchInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "relatedListIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/actions/record/{recordIds}/related-list/{relatedListId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready action data about specific recordId for the RelatedList subcontexts relatedListIds.",
        "operationId": "GET_ui-api-actions-record-recordIds-related-list-relatedListId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a related list.",
        "operationId": "POST_ui-api-actions-record-recordIds-related-list-relatedListId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "actionTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActionLink",
                  "CustomButton",
                  "InvocableAction",
                  "ProductivityAction",
                  "QuickAction",
                  "StandardButton"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "apiNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "retrievalMode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "All",
                "PageLayout"
              ],
              "type": "string"
            }
          },
          {
            "name": "sections",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "ActivityComposer",
                  "CollaborateComposer",
                  "Page",
                  "SingleActionLinks"
                ],
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/aggregate-ui": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateUiRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready metadata and data.",
        "operationId": "GET_ui-api-aggregate-ui",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateRepresentation"
                }
              }
            }
          }
        },
        "description": "Executes multiple requests within a single request",
        "operationId": "POST_ui-api-aggregate-ui",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AggregateInputRepresentation"
              }
            }
          },
          "required": false
        }
      }
    },
    "/ui-api/apps": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppsRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieves the list of apps accessible for current user",
        "operationId": "GET_ui-api-apps",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "userCustomizations",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/apps/selected": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieves an app current user last selected or should see by default",
        "operationId": "GET_ui-api-apps-selected",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "userCustomizations",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/apps/{appId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieves an app for the given app ID",
        "operationId": "GET_ui-api-apps-appId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "userCustomizations",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AppRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns the app metadata for the given App id and also saves this app as Last accessed app for the user",
        "operationId": "PATCH_ui-api-apps-appId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "userCustomizations",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/apps/{appId}/user-nav-items": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NavItemsRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieves the user's personalized nav items.",
        "operationId": "GET_ui-api-apps-appId-user-nav-items",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NavItemsRepresentation"
                }
              }
            }
          }
        },
        "description": "Updates all the user's personalized nav items.",
        "operationId": "PUT_ui-api-apps-appId-user-nav-items",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/NavItemsInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/duplicates/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicatesConfigurationRepresentation"
                }
              }
            }
          }
        },
        "description": "Get duplicate management configuration for a specific entity object",
        "operationId": "GET_ui-api-duplicates-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/favorites": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Gets a collection of favorites.",
        "operationId": "GET_ui-api-favorites"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteRepresentation"
                }
              }
            }
          }
        },
        "description": "Creates a single favorite.",
        "operationId": "POST_ui-api-favorites",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "targetType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "ListView",
                "ObjectHome",
                "Record",
                "Tab"
              ],
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/favorites/batch": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Updates all favorites at once. Sort order is updated to the given relative ordering and any favorites missing from the input payload are deleted.",
        "operationId": "PUT_ui-api-favorites-batch",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteBatchCollectionInputRepresentation"
              }
            }
          },
          "required": false
        }
      }
    },
    "/ui-api/favorites/{favoriteId}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes a single favorite by ID.",
        "operationId": "DELETE_ui-api-favorites-favoriteId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a single favorite by ID.",
        "operationId": "GET_ui-api-favorites-favoriteId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteRepresentation"
                }
              }
            }
          }
        },
        "description": "Updates a single favorite by ID.",
        "operationId": "PATCH_ui-api-favorites-favoriteId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          }
        ]
      }
    },
    "/ui-api/favorites/{favoriteId}/usage": {
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteRepresentation"
                }
              }
            }
          }
        },
        "description": "Increments the accessCount and sets the lastAccessDate to the current system time.",
        "operationId": "PATCH_ui-api-favorites-favoriteId-usage",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "favoriteId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/forms/{apiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a specific form by name.",
        "operationId": "GET_ui-api-forms-apiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/health-check": {
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "UI API health check get operation",
        "operationId": "DELETE_ui-api-health-check"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRepresentation"
                }
              }
            }
          }
        },
        "description": "UI API health check get operation",
        "operationId": "GET_ui-api-health-check"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRepresentation"
                }
              }
            }
          }
        },
        "description": "UI API health check get operation",
        "operationId": "PATCH_ui-api-health-check"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRepresentation"
                }
              }
            }
          }
        },
        "description": "UI API health check get operation",
        "operationId": "POST_ui-api-health-check"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckRepresentation"
                }
              }
            }
          }
        },
        "description": "UI API health check get operation",
        "operationId": "PUT_ui-api-health-check"
      }
    },
    "/ui-api/layout/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordLayoutRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a specific layout.",
        "operationId": "GET_ui-api-layout-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "layoutType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Compact",
                "Full",
                "Mdp",
                "Search",
                "Service_Document"
              ],
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Clone",
                "Create",
                "Edit",
                "View"
              ],
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/layout/{objectApiName}/user-state": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordLayoutUserStateRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a specific layout's user state.",
        "operationId": "GET_ui-api-layout-objectApiName-user-state",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "layoutType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Compact",
                "Full",
                "Mdp",
                "Search",
                "Service_Document"
              ],
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Clone",
                "Create",
                "Edit",
                "View"
              ],
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordLayoutUserStateRepresentation"
                }
              }
            }
          }
        },
        "description": "Update a specific layout's user state.",
        "operationId": "PATCH_ui-api-layout-objectApiName-user-state",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RecordLayoutUserStateInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "layoutType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Compact",
                "Full",
                "Mdp",
                "Search",
                "Service_Document"
              ],
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Clone",
                "Create",
                "Edit",
                "View"
              ],
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/list-info/1/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoSummaryCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve lists for a given objectApiName.",
        "operationId": "GET_ui-api-list-info-1-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "recentListsOnly",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Create a new listview.",
        "operationId": "POST_ui-api-list-info-1-objectApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ListInfoPostInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/list-info/batch": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a list of listInfo.",
        "operationId": "GET_ui-api-list-info-batch",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/list-info/{listViewId}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete a listview.",
        "operationId": "DELETE_ui-api-list-info-listViewId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve list info.",
        "operationId": "GET_ui-api-list-info-listViewId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Update list info",
        "operationId": "PATCH_ui-api-list-info-listViewId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ListInfoInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "listViewId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/list-info/{objectApiName}/{listViewApiName}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete a listview.",
        "operationId": "DELETE_ui-api-list-info-objectApiName-listViewApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve list info.",
        "operationId": "GET_ui-api-list-info-objectApiName-listViewApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Update list info",
        "operationId": "PATCH_ui-api-list-info-objectApiName-listViewApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ListInfoInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/list-object-info/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve list info.",
        "operationId": "GET_ui-api-list-object-info-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/list-preferences/{objectApiName}/{listViewApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListPreferencesRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve list preferences",
        "operationId": "GET_ui-api-list-preferences-objectApiName-listViewApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListPreferencesRepresentation"
                }
              }
            }
          }
        },
        "description": "Update list preferences",
        "operationId": "PATCH_ui-api-list-preferences-objectApiName-listViewApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ListPreferencesInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/list-records/{listViewId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a list.",
        "operationId": "GET_ui-api-list-records-listViewId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a list.",
        "operationId": "POST_ui-api-list-records-listViewId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ListRecordsInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "listViewId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/list-records/{objectApiName}/{listViewApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a list.",
        "operationId": "GET_ui-api-list-records-objectApiName-listViewApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a list.",
        "operationId": "POST_ui-api-list-records-objectApiName-listViewApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ListRecordsInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/list-ui/1/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewSummaryCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve lists for a given objectApiName.",
        "operationId": "GET_ui-api-list-ui-1-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "recentListsOnly",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/list-ui/{listViewId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListUiRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve list data and info.",
        "operationId": "GET_ui-api-list-ui-listViewId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/list-ui/{objectApiName}/{listViewApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListUiRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve list data and info.",
        "operationId": "GET_ui-api-list-ui-objectApiName-listViewApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "listViewApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/lookups/{objectApiName}/{fieldApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValuesRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record search results for the given lookup field.",
        "operationId": "GET_ui-api-lookups-objectApiName-fieldApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "fieldApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "dependentFieldBindings",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Recent",
                "Search",
                "TypeAhead"
              ],
              "type": "string"
            }
          },
          {
            "name": "sourceRecordId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "targetApiName",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LookupValuesRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record search results for the given lookup field.",
        "operationId": "POST_ui-api-lookups-objectApiName-fieldApiName",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/LookupPOSTRequestBodyRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "fieldApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Recent",
                "Search",
                "TypeAhead"
              ],
              "type": "string"
            }
          },
          {
            "name": "targetApiName",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/lookups/{objectApiName}/{fieldApiName}/{targetApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record search results for the given lookup field.",
        "operationId": "GET_ui-api-lookups-objectApiName-fieldApiName-targetApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "fieldApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "targetApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "dependentFieldBindings",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "searchType",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "enum": [
                "Recent",
                "Search",
                "TypeAhead"
              ],
              "type": "string"
            }
          },
          {
            "name": "sourceRecordId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/mru-list-info/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve MRU list info.",
        "operationId": "GET_ui-api-mru-list-info-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/mru-list-records/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate an MRU list.",
        "operationId": "GET_ui-api-mru-list-records-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/mru-list-ui/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListUiRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve MRU list data and info.",
        "operationId": "GET_ui-api-mru-list-ui-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/nav-items": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NavItemsRepresentation"
                }
              }
            }
          }
        },
        "description": "Fetch all the nav items",
        "operationId": "GET_ui-api-nav-items",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "navItemNames",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          }
        ]
      }
    },
    "/ui-api/object-info": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectInfoDirectoryRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve the object info directory.",
        "operationId": "GET_ui-api-object-info"
      }
    },
    "/ui-api/object-info/batch/{objectApiNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve metadata about a list of objects.",
        "operationId": "GET_ui-api-object-info-batch-objectApiNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/object-info/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve metadata about a specific object.",
        "operationId": "GET_ui-api-object-info-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/object-info/{objectApiName}/picklist-values/{recordTypeId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PicklistValuesCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns the values for all picklist fields for a recordType",
        "operationId": "GET_ui-api-object-info-objectApiName-picklist-values-recordTypeId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/object-info/{objectApiName}/picklist-values/{recordTypeId}/{fieldApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PicklistValuesRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns the values for a specific picklist.",
        "operationId": "GET_ui-api-object-info-objectApiName-picklist-values-recordTypeId-fieldApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "fieldApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/object-info/{objectApiName}/validation-rules-info": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationRulesRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve metadata of validation rules for the given object",
        "operationId": "GET_ui-api-object-info-objectApiName-validation-rules-info",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/predupe": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicatesRepresentation"
                }
              }
            }
          }
        },
        "description": "Performs a predupe check on given a record.",
        "operationId": "POST_ui-api-predupe",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RecordInputRepresentation"
              }
            }
          },
          "required": false
        }
      }
    },
    "/ui-api/record-avatars/batch/{recordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve avatar information about specific records.",
        "operationId": "GET_ui-api-record-avatars-batch-recordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-avatars/{recordId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractRecordAvatarRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve avatar information about specific records.",
        "operationId": "GET_ui-api-record-avatars-recordId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-avatars/{recordId}/association": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractRecordAvatarRepresentation"
                }
              }
            }
          }
        },
        "description": "Stores avatar association for specific records.",
        "operationId": "POST_ui-api-record-avatars-recordId-association",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AvatarAssociationInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-defaults/clone/{recordId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordDefaultsRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve default values for fields for cloning a record with optional record type.",
        "operationId": "GET_ui-api-record-defaults-clone-recordId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-defaults/create/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordDefaultsRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve default values for fields for a new record of a particular object and optional record type.",
        "operationId": "GET_ui-api-record-defaults-create-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-defaults/template/clone/{recordId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordDefaultsTemplateCloneRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve default values for fields for cloning a record with optional record type without layout information, and specifying only requested fields and object infos.",
        "operationId": "GET_ui-api-record-defaults-template-clone-recordId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-defaults/template/create/{objectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordDefaultsTemplateCreateRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve default values for fields for creating a new record of a particular object without layout information, and specifying only requested fields and object infos.",
        "operationId": "GET_ui-api-record-defaults-template-create-objectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/record-ui/{recordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordUiRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve presentation-ready metadata and data about specific records.",
        "operationId": "GET_ui-api-record-ui-recordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "childRelationships",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "formFactor",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "layoutTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "Compact",
                  "Full",
                  "Mdp",
                  "Search",
                  "Service_Document"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "Clone",
                  "Create",
                  "Edit",
                  "View"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "updateMru",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/records": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordRepresentation"
                }
              }
            }
          }
        },
        "description": "Create a new record.",
        "operationId": "POST_ui-api-records",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RecordInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "allowSaveOnDuplicate",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "handleOwnerChange",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "includeFieldsInBody",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "triggerOtherEmail",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "triggerUserEmail",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "useDefaultRule",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/records/batch": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Execute Batch Operations.",
        "operationId": "POST_ui-api-records-batch",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
              }
            }
          },
          "required": false
        }
      }
    },
    "/ui-api/records/batch/{recordIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve record data for a list of recordIds.",
        "operationId": "GET_ui-api-records-batch-recordIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "childRelationships",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "layoutTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "Compact",
                  "Full",
                  "Mdp",
                  "Search",
                  "Service_Document"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "Clone",
                  "Create",
                  "Edit",
                  "View"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "updateMru",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/records/{recordId}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete record.",
        "operationId": "DELETE_ui-api-records-recordId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve record data.",
        "operationId": "GET_ui-api-records-recordId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "childRelationships",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "forms",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "layoutTypes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "Compact",
                  "Full",
                  "Mdp",
                  "Search",
                  "Service_Document"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "enum": [
                  "Clone",
                  "Create",
                  "Edit",
                  "View"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "updateMru",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordRepresentation"
                }
              }
            }
          }
        },
        "description": "Update an existing record.",
        "operationId": "PATCH_ui-api-records-recordId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RecordInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "allowSaveOnDuplicate",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "handleOwnerChange",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "triggerOtherEmail",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "triggerUserEmail",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          },
          {
            "name": "useDefaultRule",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/ui-api/records/{recordId}/child-relationships/{relationshipName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve child relationship data on a parent record.",
        "operationId": "GET_ui-api-records-recordId-child-relationships-relationshipName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relationshipName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-count/batch/{parentRecordId}/{relatedListNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a batch of record counts.",
        "operationId": "GET_ui-api-related-list-count-batch-parentRecordId-relatedListNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "maxCount",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-count/{parentRecordId}/{relatedListId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListRecordCountRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve record counts.",
        "operationId": "GET_ui-api-related-list-count-parentRecordId-relatedListId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "maxCount",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-info/batch/{parentObjectApiName}/{relatedListNames}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve a batch of related list info.",
        "operationId": "GET_ui-api-related-list-info-batch-parentObjectApiName-relatedListNames",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentObjectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListNames",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-info/{parentObjectApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListSummaryInfoCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve collection of related list summaries.",
        "operationId": "GET_ui-api-related-list-info-parentObjectApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentObjectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-info/{parentObjectApiName}/{relatedListId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve related info.",
        "operationId": "GET_ui-api-related-list-info-parentObjectApiName-relatedListId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentObjectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "restrictColumnsToLayout",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Update user preferences on an existing related list.",
        "operationId": "PATCH_ui-api-related-list-info-parentObjectApiName-relatedListId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RelatedListInfoInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "parentObjectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-info/{parentRecordId}/1/{relatedListId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve related info.",
        "operationId": "GET_ui-api-related-list-info-parentRecordId-1-relatedListId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "restrictColumnsToLayout",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "boolean"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListInfoRepresentation"
                }
              }
            }
          }
        },
        "description": "Update user preferences on an existing related list.",
        "operationId": "PATCH_ui-api-related-list-info-parentRecordId-1-relatedListId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RelatedListInfoInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "recordTypeId",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-preferences/batch/{preferencesIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve user preferences.",
        "operationId": "GET_ui-api-related-list-preferences-batch-preferencesIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "preferencesIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/related-list-preferences/{preferencesId}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes a single user preferences by preferencesId.",
        "operationId": "DELETE_ui-api-related-list-preferences-preferencesId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "preferencesId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListUserPreferencesRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve user preferences.",
        "operationId": "GET_ui-api-related-list-preferences-preferencesId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "preferencesId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListUserPreferencesRepresentation"
                }
              }
            }
          }
        },
        "description": "Update user preferences on an existing related list.",
        "operationId": "PATCH_ui-api-related-list-preferences-preferencesId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RelatedListUserPreferencesInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "preferencesId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-records/batch/{parentRecordId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns a batch of record data to populate several related lists.",
        "operationId": "GET_ui-api-related-list-records-batch-parentRecordId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns a batch of record data to populate several related lists.",
        "operationId": "POST_ui-api-related-list-records-batch-parentRecordId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RelatedListRecordsBatchInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/related-list-records/batch/{parentRecordId}/{relatedListIds}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns a batch of record data to populate several related lists.",
        "operationId": "GET_ui-api-related-list-records-batch-parentRecordId-relatedListIds",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedBatchRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns a batch of record data to populate several related lists.",
        "operationId": "POST_ui-api-related-list-records-batch-parentRecordId-relatedListIds",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RelatedListRecordsBatchInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListIds",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/ui-api/related-list-records/{parentRecordId}/{relatedListId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a related list.",
        "operationId": "GET_ui-api-related-list-records-parentRecordId-relatedListId",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RelatedListRecordCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Returns record data to populate a related list.",
        "operationId": "POST_ui-api-related-list-records-parentRecordId-relatedListId",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RelatedListRecordsInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "parentRecordId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "relatedListId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "optionalFields",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "array",
              "items": {
                "collectionFormat": "csv",
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/search-info/{objectApiName}/filters": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchFilterMetadataCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "Fetches filters metadata.",
        "operationId": "GET_ui-api-search-info-objectApiName-filters",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/search-info/{objectApiName}/filters/{filterApiName}/options": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchFilterOptionCollectionRepresentation"
                }
              }
            }
          }
        },
        "description": "List of options for the search filter field.",
        "operationId": "GET_ui-api-search-info-objectApiName-filters-filterApiName-options",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "filterApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Query term to use for matching against filter options.",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/search-info/{objectApiName}/lookup/{fieldApiName}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LookupMetadataRepresentation"
                }
              }
            }
          }
        },
        "description": "Lookup field metadata",
        "operationId": "GET_ui-api-search-info-objectApiName-lookup-fieldApiName",
        "requestBody": {
          "content": {},
          "required": false
        },
        "parameters": [
          {
            "name": "fieldApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          },
          {
            "name": "objectApiName",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "in": "path",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/search/results": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsSummaryRepresentation"
                }
              }
            }
          }
        },
        "description": "List all results over entities",
        "operationId": "POST_ui-api-search-results",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/search/results/keyword": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordSearchResultsSummaryRepresentation"
                }
              }
            }
          }
        },
        "description": "List all results over entities (or only one) for the keyword results type",
        "operationId": "POST_ui-api-search-results-keyword",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/KeywordSearchRequestInputRepresentation"
              }
            }
          },
          "required": false
        },
        "parameters": [
          {
            "name": "objectApiName",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "in": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "/ui-api/themes/active": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeRepresentation"
                }
              }
            }
          }
        },
        "description": "Retrieve the active theme.",
        "operationId": "GET_ui-api-themes-active"
      }
    }
  },
  "components": {
    "schemas": {
      "AbstractFormSubitemRepresentation": {
        "description": "Form Subitem",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "subitemType": {
            "description": "Subitem type.",
            "enum": [
              "EmptySpace",
              "Field"
            ],
            "type": "string"
          }
        },
        "required": [
          "subitemType"
        ]
      },
      "AbstractPicklistValueAttributesRepresentation": {
        "description": "Additional picklist value attributes.",
        "type": "object",
        "discriminator": {
          "propertyName": "picklistAtrributesValueType"
        },
        "properties": {
          "picklistAtrributesValueType": {
            "description": "Indicates the type of picklist attribute value.",
            "enum": [
              "CaseStatus",
              "LeadStatus",
              "OpportunityStage",
              "Standard",
              "WorkStepStatus"
            ],
            "type": "string"
          }
        },
        "required": [
          "picklistAtrributesValueType"
        ]
      },
      "AbstractRecordAvatarRepresentation": {
        "description": "Represents an avatar associated to a record.",
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "recordId": {
            "description": "The ID of the record that this avatar is associated to.",
            "type": "string"
          },
          "type": {
            "description": "Indicates the type of record avatar.",
            "enum": [
              "Photo",
              "Theme"
            ],
            "type": "string"
          }
        },
        "required": [
          "recordId",
          "type"
        ]
      },
      "AbstractRecordLayoutComponentRepresentation": {
        "description": "Record layout component.",
        "type": "object",
        "discriminator": {
          "propertyName": "componentType"
        },
        "properties": {
          "apiName": {
            "description": "The API name of the field powering this component, if there is one. The API name of the field if the componentType is Field. The API name of the canvas app if the componentType is Canvas.",
            "type": "string"
          },
          "componentType": {
            "description": "Component type.",
            "enum": [
              "Canvas",
              "CustomLink",
              "EmptySpace",
              "Field",
              "ReportChart",
              "VisualforcePage"
            ],
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "componentType"
        ]
      },
      "ActionInputRepresentation": {
        "description": "Query (using POST) for action's query param input representation.",
        "type": "object",
        "properties": {
          "actionTypes": {
            "description": "The list of action types",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "apiNames": {
            "description": "The API names of the actions",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formFactor": {
            "description": "Required form factor.",
            "type": "string"
          },
          "retrievalMode": {
            "description": "RetrievalMode used to fetch actions.",
            "type": "string"
          },
          "sections": {
            "description": "Section in PlatformAction.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "actionTypes",
          "apiNames",
          "formFactor",
          "retrievalMode",
          "sections"
        ]
      },
      "ActionOverrideRepresentation": {
        "description": "Connect API representation of a action override result",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "records": {
            "description": "Flexi page records",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordRepresentation"
            }
          }
        },
        "required": [
          "records"
        ]
      },
      "ActionRelatedListSingleBatchInputRepresentation": {
        "description": "Query (using POST) for actions in multiple related lists.",
        "type": "object",
        "properties": {
          "actionTypes": {
            "description": "The list of action types on the Related List",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "apiNames": {
            "description": "The API names of the actions on the Related List",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "formFactor": {
            "description": "Required form factor.",
            "type": "string"
          },
          "relatedListId": {
            "description": "The identifier for this related list.",
            "type": "string"
          },
          "retrievalMode": {
            "description": "RetrievalMode used to fetch actions.",
            "type": "string"
          },
          "sections": {
            "description": "Section in PlatformAction.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "actionTypes",
          "apiNames",
          "formFactor",
          "relatedListId",
          "retrievalMode",
          "sections"
        ]
      },
      "ActionRelatedListsBatchInputRepresentation": {
        "description": "Query (using POST) for actions in multiple related lists.",
        "type": "object",
        "properties": {
          "relatedListsActionParameters": {
            "description": "Parameters for each of the related lists in this batch request.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "relatedListsActionParameters"
        ]
      },
      "ActionRepresentation": {
        "description": "Actions.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "actions": {
            "description": "Record data with some metatdata.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EntityActionRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "the url of the current request",
            "type": "string"
          }
        },
        "required": [
          "actions",
          "eTag",
          "url"
        ]
      },
      "AggregateInputRepresentation": {
        "description": "The operations that are to be executed within aggregate",
        "type": "object",
        "properties": {
          "compositeRequest": {
            "description": "The list of operations to be executed",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "compositeRequest"
        ]
      },
      "AggregateRepresentation": {
        "description": "The result of all operations",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "compositeResponse": {
            "description": "The responses from the execution",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationResponseRepresentation"
            }
          }
        },
        "required": [
          "compositeResponse"
        ]
      },
      "AggregateUiRepresentation": {
        "description": "Aggregate UI.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "forms": {
            "description": "Map of Form API Name -> Form.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FormRepresentation"
            }
          },
          "layoutUserStates": {
            "description": "Map of layout ID -> user state.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordLayoutUserStateRepresentation"
            }
          },
          "layouts": {
            "description": "Record layouts.",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RecordLayoutRepresentation"
                  }
                }
              }
            }
          },
          "objectInfos": {
            "description": "Object metadata.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectInfoRepresentation"
            }
          },
          "records": {
            "description": "Record data.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordRepresentation"
            }
          }
        },
        "required": [
          "forms",
          "layoutUserStates",
          "layouts",
          "objectInfos",
          "records"
        ]
      },
      "AppRepresentation": {
        "description": "Metadata for an app",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "appId": {
            "description": "Reference to App Definition",
            "type": "string"
          },
          "description": {
            "description": "Description for the app",
            "type": "string"
          },
          "developerName": {
            "description": "Unique developer name of the app",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "formFactors": {
            "description": "Device form factors in which this app is supported",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headerColor": {
            "description": "Primary color selected by admin for this app. Ex: #0070D2",
            "type": "string"
          },
          "iconUrl": {
            "description": "Icon URL of the App",
            "type": "string"
          },
          "isNavAutoTempTabsDisabled": {
            "description": "Nav automatically create temporary tabs setting",
            "type": "boolean"
          },
          "isNavPersonalizationDisabled": {
            "description": "Nav personalization setting",
            "type": "boolean"
          },
          "isNavTabPersistenceDisabled": {
            "description": "Indicates if the Lightning Console App should persist a user's workspace tabs",
            "type": "boolean"
          },
          "isOmniPinnedViewEnabled": {
            "description": "Indicates if the Lightning App should contain the Omni-Channel pinned view",
            "type": "boolean"
          },
          "label": {
            "description": "Label of the app",
            "type": "string"
          },
          "logoUrl": {
            "description": "URL of the logo uploaded by Admin for this app",
            "type": "string"
          },
          "mobileStartUrl": {
            "description": "Mobile specific launch url for this app",
            "type": "string"
          },
          "navItems": {
            "description": "tabs/nav items for the app",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavItemRepresentation"
            }
          },
          "selected": {
            "description": "Flag to specify if this app is the default app for the user",
            "type": "boolean"
          },
          "startUrl": {
            "description": "Launch URL for this app",
            "type": "string"
          },
          "type": {
            "description": "Type of the app - Classic/Lightning/Community/Connected",
            "type": "string"
          },
          "userNavItems": {
            "description": "User's nav items for the app, if applicable and requested.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavItemRepresentation"
            }
          }
        },
        "required": [
          "appId",
          "description",
          "developerName",
          "eTag",
          "formFactors",
          "headerColor",
          "iconUrl",
          "isNavAutoTempTabsDisabled",
          "isNavPersonalizationDisabled",
          "isNavTabPersistenceDisabled",
          "isOmniPinnedViewEnabled",
          "label",
          "logoUrl",
          "mobileStartUrl",
          "navItems",
          "selected",
          "startUrl",
          "type",
          "userNavItems"
        ]
      },
      "AppliedSearchFilterOutputRepresentation": {
        "description": "Applied filter output response.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldPath": {
            "description": "Field path where we should apply the filter",
            "type": "string"
          },
          "label": {
            "description": "Label for the applied filter",
            "type": "string"
          },
          "operator": {
            "description": "Operator for the filter",
            "type": "string"
          },
          "values": {
            "description": "Values applied for the filter",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fieldPath",
          "label",
          "operator",
          "values"
        ]
      },
      "AppsRepresentation": {
        "description": "A list of apps accessible for current user.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apps": {
            "description": "apps list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "apps",
          "eTag"
        ]
      },
      "AvatarAssociationInputRepresentation": {
        "description": "Description of a Avatar Association input.",
        "type": "object",
        "properties": {
          "actionType": {
            "description": "Association action type",
            "enum": [
              "AssociateAvatar",
              "DisassociateAvatar",
              "RemoveLogo",
              "ReportLogo"
            ],
            "type": "string"
          },
          "blueMasterId": {
            "description": "The BlueMaster Id",
            "type": "string"
          },
          "externalId": {
            "description": "The External Id",
            "type": "string"
          },
          "photoUrl": {
            "description": "The Photo url.",
            "type": "string"
          },
          "profileName": {
            "description": "The Profile Name",
            "type": "string"
          }
        },
        "required": [
          "actionType",
          "blueMasterId",
          "externalId",
          "photoUrl",
          "profileName"
        ]
      },
      "BatchInputRepresentation": {
        "description": "Batch Operations on Records.",
        "type": "object",
        "properties": {
          "allOrNone": {
            "description": "Set allOrNone param",
            "type": "boolean"
          },
          "operations": {
            "description": "Set operations",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "allOrNone",
          "operations"
        ]
      },
      "BatchOperationInputRepresentation": {
        "description": "Batch operation.",
        "type": "object",
        "properties": {
          "records": {
            "description": "Set records param",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "type": {
            "description": "Set records param",
            "enum": [
              "Create",
              "Delete",
              "Update"
            ],
            "type": "string"
          }
        },
        "required": [
          "records",
          "type"
        ]
      },
      "CanvasLayoutComponentRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
          },
          {
            "description": "Canvas record layout component.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "displayLocation": {
                "description": "Display location",
                "type": "string"
              },
              "height": {
                "description": "Height",
                "type": "string"
              },
              "referenceId": {
                "description": "Reference ID",
                "type": "string"
              },
              "showScroll": {
                "description": "Show scroll",
                "type": "boolean"
              },
              "width": {
                "description": "Width",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "CaseStatusPicklistValueAttributesRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractPicklistValueAttributesRepresentation"
          },
          {
            "description": "Additional picklist value attributes for case statuses.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "closed": {
                "description": "True if this status is a closed status, otherwise false. For more info, see the doc for the CaseStatus standard object.",
                "type": "boolean"
              }
            }
          }
        ],
        "type": "string"
      },
      "ChildRelationshipRepresentation": {
        "description": "Child Relationship.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "childObjectApiName": {
            "description": "The token of the child Object on which there is a foreign key back to the parent Object.",
            "type": "string"
          },
          "fieldName": {
            "description": "The token of the field that has a foreign key back to the parent Object.",
            "type": "string"
          },
          "junctionIdListNames": {
            "description": "If this relationship uses a junction ID list, this contains a list of potentially polymorphic types to which the IDs in this relationship's junction ID list can resolve.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "junctionReferenceTo": {
            "description": "A list of zero or more query-able junction ID list names this relationship may use. These names can be queried like field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "relationshipName": {
            "description": "The name of the relationship.",
            "type": "string"
          }
        },
        "required": [
          "childObjectApiName",
          "fieldName",
          "junctionIdListNames",
          "junctionReferenceTo",
          "relationshipName"
        ]
      },
      "CustomLinkLayoutComponentRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
          },
          {
            "description": "Custom link record layout component.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "behavior": {
                "description": "Custom Link behavior",
                "enum": [
                  "NewWindow",
                  "NoSidebar",
                  "OnClickJavaScript",
                  "Replace",
                  "Sidebar"
                ],
                "type": "string"
              },
              "customLinkUrl": {
                "description": "Custom link URL",
                "type": "string"
              },
              "label": {
                "description": "Label",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "DisplayLayoutAndMatchingInfoRepresentation": {
        "description": "Search Lookups target display layout and matching info",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "displayLayout": {
            "description": "Display information for lookup results",
            "$ref": "#/components/schemas/DisplayLayoutRepresentation"
          },
          "matchingInfo": {
            "description": "Information about matching fields",
            "$ref": "#/components/schemas/MatchingInfoRepresentation"
          }
        },
        "required": [
          "displayLayout",
          "matchingInfo"
        ]
      },
      "DisplayLayoutRepresentation": {
        "description": "Search Lookups target display layout metadata",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "displayFields": {
            "description": "Fields to display in lookup results",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "displayFields"
        ]
      },
      "DuplicateRecordErrorRepresentation": {
        "description": "Duplicate record error.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "matchResults": {
            "description": "Duplicate rule match results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchResultRepresentation"
            }
          }
        },
        "required": [
          "matchResults"
        ]
      },
      "DuplicateResultInfoRepresentation": {
        "description": "Duplicate Result Info",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "allowSave": {
            "description": "Indicates whether duplicates are allowed to be saved.",
            "type": "boolean"
          },
          "matchResultInfo": {
            "description": "Match resut info.",
            "$ref": "#/components/schemas/MatchResultInfoRepresentation"
          },
          "rule": {
            "description": "Name of Duplicate rule.",
            "type": "string"
          }
        },
        "required": [
          "allowSave",
          "matchResultInfo",
          "rule"
        ]
      },
      "DuplicateRuleFilterItemRepresentation": {
        "description": "Duplicate Rule filter item ",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "field": {
            "description": "The field name on which filter is set.",
            "type": "string"
          },
          "operation": {
            "description": "Operation to be used.",
            "type": "string"
          },
          "sortOrder": {
            "description": "The order in which filter item was added to the filter.",
            "type": "integer"
          },
          "value": {
            "description": "The value of field to evaluate operation.",
            "type": "string"
          }
        },
        "required": [
          "eTag",
          "field",
          "operation",
          "sortOrder",
          "value"
        ]
      },
      "DuplicateRuleFilterRepresentation": {
        "description": "Duplicate Rule filter ",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "booleanFilter": {
            "description": "The custom filter logic expressed as a boolean expression.",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "filterItems": {
            "description": "List of filter items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuplicateRuleFilterItemRepresentation"
            }
          },
          "ruleCritera": {
            "description": "Rule Criteria.",
            "type": "string"
          }
        },
        "required": [
          "booleanFilter",
          "eTag",
          "filterItems",
          "ruleCritera"
        ]
      },
      "DuplicateRuleRepresentation": {
        "description": "Duplicate Rule for dedupe configuration",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "actionOnInsert": {
            "description": "Action on insert, Block or Allow for dedupe rule",
            "enum": [
              "Allow",
              "Block"
            ],
            "type": "string"
          },
          "actionOnUpdate": {
            "description": "Action on update, Block or Allow for dedupe rule.",
            "enum": [
              "Allow",
              "Block"
            ],
            "type": "string"
          },
          "active": {
            "description": "Determine whether dedupe rule is active.",
            "type": "boolean"
          },
          "duplicateRuleFilters": {
            "description": "Duplicate filters.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuplicateRuleFilterRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "matchRules": {
            "description": "MatchRules for the current DuplicateRule.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchRuleRepresentation"
            }
          },
          "name": {
            "description": "Name of Duplicate rule.",
            "type": "string"
          },
          "operationsOnInsert": {
            "description": "Operations on insert, either or both of alert and report for dedupe rule.",
            "type": "array",
            "items": {
              "enum": [
                "Alert",
                "Report"
              ],
              "type": "string"
            }
          },
          "operationsOnUpdate": {
            "description": "Operations on update, either or both of alert and report for dedupe rule.",
            "type": "array",
            "items": {
              "enum": [
                "Alert",
                "Report"
              ],
              "type": "string"
            }
          }
        },
        "required": [
          "actionOnInsert",
          "actionOnUpdate",
          "active",
          "duplicateRuleFilters",
          "eTag",
          "matchRules",
          "name",
          "operationsOnInsert",
          "operationsOnUpdate"
        ]
      },
      "DuplicatesConfigurationRepresentation": {
        "description": "Duplicate Configuration for an object API. ",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "ApiName of the Entity.",
            "type": "string"
          },
          "dedupeEnabled": {
            "description": "Determine dedupe is enabled/disabled",
            "type": "boolean"
          },
          "dedupeFields": {
            "description": "Dedupe fields used in config.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "duplicateRules": {
            "description": "Duplicate rules used in dedupe config.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DuplicateRuleRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "predupeEnabled": {
            "description": "Determine predupe is enabled/disabled.",
            "type": "boolean"
          }
        },
        "required": [
          "apiName",
          "dedupeEnabled",
          "dedupeFields",
          "duplicateRules",
          "eTag",
          "predupeEnabled"
        ]
      },
      "DuplicatesRepresentation": {
        "description": "Duplicates ",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "allowSave": {
            "description": "Determince whether duplicates are allowed to be saved",
            "type": "boolean"
          },
          "duplicateError": {
            "description": "Determine if there  exists duplicates.",
            "type": "boolean"
          },
          "duplicateRules": {
            "description": "Duplicate rules used for match.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matches": {
            "description": "A list of potential matches.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchRepresentation"
            }
          }
        },
        "required": [
          "allowSave",
          "duplicateError",
          "duplicateRules",
          "matches"
        ]
      },
      "EmptySpaceFormSubitemRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFormSubitemRepresentation"
          },
          {
            "description": "Empty Space Subitem.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            }
          }
        ],
        "type": "string"
      },
      "EntityActionRepresentation": {
        "description": "Entity's Actions.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "actions": {
            "description": "Record data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformActionRepresentation"
            }
          },
          "links": {
            "description": "subconext's api url of the current current entity request",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "description": "the url of the current entity request",
            "type": "string"
          }
        },
        "required": [
          "actions",
          "links",
          "url"
        ]
      },
      "ErrorMessageRepresentation": {
        "description": "Explain why we were not able to search on the object",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "errorCode": {
            "description": "Type of error",
            "type": "string"
          },
          "message": {
            "description": "Description of the error",
            "type": "string"
          }
        },
        "required": [
          "errorCode",
          "message"
        ]
      },
      "FavoriteBatchCollectionInputRepresentation": {
        "description": "Represents all favorites when updating favorites in batch.",
        "type": "object",
        "properties": {
          "favorites": {
            "description": "The list of favorites to keep and update.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "favorites"
        ]
      },
      "FavoriteBatchInputRepresentation": {
        "description": "Represents a single favorite when updating favorites in batch.",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the favorite.",
            "type": "string"
          },
          "name": {
            "description": "The name of the favorite.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "FavoriteCollectionRepresentation": {
        "description": "A list of favorites.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "favorites": {
            "description": "The list of favorites.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteRepresentation"
            }
          }
        },
        "required": [
          "favorites"
        ]
      },
      "FavoriteInputRepresentation": {
        "description": "Create or update a favorite.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the favorite.",
            "type": "string"
          },
          "sortOrder": {
            "description": "The sort order of the favorite, from 1 to N.",
            "type": "integer"
          },
          "target": {
            "description": "The record, API name, or content being favorited.",
            "type": "string"
          },
          "targetType": {
            "description": "The type of favorite.",
            "enum": [
              "ListView",
              "ObjectHome",
              "Record",
              "Tab"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "sortOrder",
          "target",
          "targetType"
        ]
      },
      "FavoriteRepresentation": {
        "description": "A representation of a single favorite.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "accessCount": {
            "description": "The number of times this favorite has been used.",
            "type": "integer"
          },
          "iconColor": {
            "description": "The color of the icon for this favorite, usually the related entity's color.",
            "type": "string"
          },
          "iconUrl": {
            "description": "The URL of the icon for the favorite, usually the related entity's icon.",
            "type": "string"
          },
          "id": {
            "description": "ID of the favorite.",
            "type": "string"
          },
          "lastAccessDate": {
            "description": "The last time this favorite was used.",
            "type": "string"
          },
          "name": {
            "description": "The name of the favorite.",
            "type": "string"
          },
          "objectType": {
            "description": "The developer name of the entity associated with this favorite, if any.",
            "type": "string"
          },
          "sortOrder": {
            "description": "The sort order of the favorite, from 1 to N.",
            "type": "integer"
          },
          "subtitle": {
            "description": "Subtitle of the favorite, usually the entity's label. Provides additional information about the type of record or content being favorited.",
            "type": "string"
          },
          "target": {
            "description": "The record, API name, or content being favorited.",
            "type": "string"
          },
          "targetType": {
            "description": "The type of record or content being favorited.",
            "enum": [
              "ListView",
              "ObjectHome",
              "Record",
              "Tab"
            ],
            "type": "string"
          }
        },
        "required": [
          "accessCount",
          "iconColor",
          "iconUrl",
          "id",
          "lastAccessDate",
          "name",
          "objectType",
          "sortOrder",
          "subtitle",
          "target",
          "targetType"
        ]
      },
      "FieldFormSubitemRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFormSubitemRepresentation"
          },
          {
            "description": "Field form subitem.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "apiName": {
                "description": "The API name of the field powering this component ",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "FieldLayoutComponentRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
          },
          {
            "description": "Field record layout component.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "label": {
                "description": "Label",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "FieldRepresentation": {
        "description": "Field metadata.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The API name for this field.",
            "type": "string"
          },
          "calculated": {
            "description": "Indicates whether the field is a custom formula field (?).",
            "type": "boolean"
          },
          "compound": {
            "description": "Indicates whether the field is a top level compound field (or in the case of switchable_personname, might be a compound field). This is calculated based on whether other accessible fields in the object refer to this field as their compoundFieldName. This value will typically be false for LOCATION, because of the odd way locations are handled in describes.",
            "type": "boolean"
          },
          "compoundComponentName": {
            "description": "When this field is a component of a compound field, this is the normalized component name otherwise this will be null. For example, this will return \"Street\" if the field represents \"BillingStreet\" of an Address compound field.",
            "type": "string"
          },
          "compoundFieldName": {
            "description": "When this field is an individual component field of a compound field, this indicates which field is the top level compound field. This will be null when the field does not represent a component field of a compound field.",
            "type": "string"
          },
          "controllerName": {
            "description": "The name of the field that controls the values of this picklist.",
            "type": "string"
          },
          "controllingFields": {
            "description": "A list of fields that the current field depends on. ",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createable": {
            "description": "Indicates whether the field can be created.",
            "type": "boolean"
          },
          "custom": {
            "description": "Indicates whether the field is custom.",
            "type": "boolean"
          },
          "dataType": {
            "description": "Field data type.",
            "enum": [
              "Address",
              "Anytype",
              "Base64",
              "Boolean",
              "ComboBox",
              "ComplexValue",
              "Currency",
              "Date",
              "DateTime",
              "Double",
              "Email",
              "EncryptedString",
              "Int",
              "JunctionIdList",
              "Location",
              "Long",
              "MultiPicklist",
              "Percent",
              "Phone",
              "Picklist",
              "Reference",
              "String",
              "TextArea",
              "Time",
              "Url"
            ],
            "type": "string"
          },
          "externalId": {
            "description": "Returns if this field has an external id.",
            "type": "boolean"
          },
          "extraTypeInfo": {
            "description": "Additional data type information.",
            "enum": [
              "ExternalLookup",
              "ImageUrl",
              "IndirectLookup",
              "PersonName",
              "PlainTextArea",
              "RichTextArea",
              "SwitchablePersonName"
            ],
            "type": "string"
          },
          "filterable": {
            "description": "Indicates whether the field is filterable. If true, then this field can be specified in the WHERE clause of a SOQL statement.",
            "type": "boolean"
          },
          "filteredLookupInfo": {
            "description": "If the field is a reference field type with a lookup filter, this contains the lookup information.",
            "$ref": "#/components/schemas/FilteredLookupInfoRepresentation"
          },
          "highScaleNumber": {
            "description": "Indicates whether the field stores numbers to 8 decimal places regardless of what's specified in the field details.",
            "type": "boolean"
          },
          "htmlFormatted": {
            "description": "Indicates whether the field has been formatted for HTML and should be encoded for display in HTML. Also indicates whether a field is a custom formula field that has an IMAGE text function.",
            "type": "boolean"
          },
          "inlineHelpText": {
            "description": "The text that displays in the field-level help hover text for this field.",
            "type": "string"
          },
          "label": {
            "description": "Text label that is displayed next to the field in the Salesforce user interface. This label may be localized.",
            "type": "string"
          },
          "length": {
            "description": "For string fields, the maximum size of the field in number of Unicode characters (not bytes).",
            "type": "integer"
          },
          "maskType": {
            "description": "Returns the mask type.",
            "type": "string"
          },
          "nameField": {
            "description": "Indicates whether the field is a name field.",
            "type": "boolean"
          },
          "polymorphicForeignKey": {
            "description": "Indicates whether the field is a foreign key over a domain of multiple entities.",
            "type": "boolean"
          },
          "precision": {
            "description": "For double fields, indicates the maximum number of digits that can be stored, on both sides of the decimal point.",
            "type": "integer"
          },
          "reference": {
            "description": "Indicates whether the field is a foreign key reference to another record.",
            "type": "boolean"
          },
          "referenceTargetField": {
            "description": "For indirect lookup relationships on external objects, the target custom field of the referenced object.",
            "type": "string"
          },
          "referenceToInfos": {
            "description": "For fields that refer to other objects, this list includes information about the object types and name fields of the referenced objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceToInfoRepresentation"
            }
          },
          "relationshipName": {
            "description": "The name of the relationship, if this is a master-detail relationship field.",
            "type": "string"
          },
          "required": {
            "description": "Indicates whether the field is required on create or update.",
            "type": "boolean"
          },
          "scale": {
            "description": "For double fields, indicates the number of digits to the right of the decimal point.",
            "type": "integer"
          },
          "searchPrefilterable": {
            "description": "Indicates whether a foreign key can be included in prefiltering (true) or not (false) when used in a SOSL WHERE clause. Prefiltering means to filter by a specific field value before executing the full search query.",
            "type": "boolean"
          },
          "sortable": {
            "description": "Indicates whether a query can sort on this field.",
            "type": "boolean"
          },
          "unique": {
            "description": "Determines if a field is unique or not.",
            "type": "boolean"
          },
          "updateable": {
            "description": "Indicates whether the field can be updated.",
            "type": "boolean"
          }
        },
        "required": [
          "apiName",
          "calculated",
          "compound",
          "compoundComponentName",
          "compoundFieldName",
          "controllerName",
          "controllingFields",
          "createable",
          "custom",
          "dataType",
          "externalId",
          "extraTypeInfo",
          "filterable",
          "filteredLookupInfo",
          "highScaleNumber",
          "htmlFormatted",
          "inlineHelpText",
          "label",
          "length",
          "maskType",
          "nameField",
          "polymorphicForeignKey",
          "precision",
          "reference",
          "referenceTargetField",
          "referenceToInfos",
          "relationshipName",
          "required",
          "scale",
          "searchPrefilterable",
          "sortable",
          "unique",
          "updateable"
        ]
      },
      "FieldValueRepresentation": {
        "description": "Contains both the raw and displayable field values for a field in a Record.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "displayValue": {
            "description": "The displayable value for a field. For a date, this will be a value familiar to users rather than an ISO 8601 formatted date value, which is what the raw value would be. Similarly, currency values will also have a formatted display value. For data that can be localized to the context user's language using the toLabel() function, that value will also be displayed here.",
            "type": "string"
          },
          "value": {
            "description": "The value of a field in its raw data form.",
            "type": "object"
          }
        },
        "required": [
          "displayValue",
          "value"
        ]
      },
      "FilteredLookupInfoRepresentation": {
        "description": "Filtered lookup info.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "controllingFields": {
            "description": "Controlling fields when the lookup filter is dependent on the source object.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dependent": {
            "description": "Indicates whether the lookup filter is dependent on the source object.",
            "type": "boolean"
          },
          "optionalFilter": {
            "description": "Indicates whether the lookup filter is optional.",
            "type": "boolean"
          }
        },
        "required": [
          "controllingFields",
          "dependent",
          "optionalFilter"
        ]
      },
      "FlexipageFormulaActivationRepresentation": {
        "description": "Connect API representation for flexipage formula activations",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "activations": {
            "description": "Flexipage Formula Activations",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FormulaOverridesInfoRepresentation"
              }
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "activations",
          "eTag"
        ]
      },
      "FormItemRepresentation": {
        "description": "Form item",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "formSubitems": {
            "description": "Subitems that make up the item.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractFormSubitemRepresentation"
            }
          },
          "label": {
            "description": "Text label for the item.",
            "type": "string"
          }
        },
        "required": [
          "formSubitems",
          "label"
        ]
      },
      "FormRepresentation": {
        "description": "Form.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "Form developer name.",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "description": "Form label.",
            "type": "string"
          },
          "sections": {
            "description": "Form sections.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormSectionRepresentation"
            }
          }
        },
        "required": [
          "apiName",
          "eTag",
          "label",
          "sections"
        ]
      },
      "FormRowRepresentation": {
        "description": "Form row.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "formItems": {
            "description": "The items in this row, from left to right. Might not extend to the last column.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormItemRepresentation"
            }
          }
        },
        "required": [
          "formItems"
        ]
      },
      "FormSectionRepresentation": {
        "description": "Form section.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "Form section developer name.",
            "type": "string"
          },
          "columns": {
            "description": "Number of columns in the section.",
            "type": "integer"
          },
          "formSectionRows": {
            "description": "The rows in the section.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormRowRepresentation"
            }
          },
          "label": {
            "description": "Form section label.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "columns",
          "formSectionRows",
          "label"
        ]
      },
      "FormulaOverridesInfoRepresentation": {
        "description": "Formula overrides info",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldNames": {
            "description": "The record field names referenced by the formula, used to efficiently retrieve record info downstream.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "flexipageName": {
            "description": "The name of the flexipage to activate contingent on formula evaluation",
            "type": "string"
          },
          "jsFormula": {
            "description": "The JS encoded formula for execution on the client",
            "type": "string"
          },
          "order": {
            "description": "The priority of this formula activation in the case there are multiple defined for a criteria",
            "type": "integer"
          }
        },
        "required": [
          "fieldNames",
          "flexipageName",
          "jsFormula",
          "order"
        ]
      },
      "GraphQLBatchInputRepresentation": {
        "description": "GraphQL Batch Input Rep",
        "type": "object",
        "properties": {
          "batchQuery": {
            "description": "The list of graphQL operations to keep and update.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "batchQuery"
        ]
      },
      "GraphQLErrorLocation": {
        "description": "The location where a GraphQL error occurred.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "column": {
            "description": "The column number where the GraphQL error occurred.",
            "type": "integer"
          },
          "line": {
            "description": "The line number where the GraphQL error occurred.",
            "type": "integer"
          }
        },
        "required": [
          "column",
          "line"
        ]
      },
      "GraphQLErrorRepresentation": {
        "description": "A GraphQL Error.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "extensions": {
            "description": "The extensions of the error occurred.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "locations": {
            "description": "The locations where the error occurred.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GraphQLErrorLocation"
            }
          },
          "message": {
            "description": "The reason the error occurred.",
            "type": "string"
          },
          "paths": {
            "description": "The paths where the error occurred.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "extensions",
          "locations",
          "message",
          "paths"
        ]
      },
      "GraphQLInputRepresentation": {
        "description": "A GraphQL query and any associated variables.",
        "type": "object",
        "properties": {
          "operationName": {
            "description": "The operation that is being executed.",
            "type": "string"
          },
          "query": {
            "description": "The GraphQL query.",
            "type": "string"
          },
          "variables": {
            "description": "The variables for the query.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "operationName",
          "query",
          "variables"
        ]
      },
      "GraphQLRepresentation": {
        "description": "GraphQL query result.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "data": {
            "description": "The data of the GraphQL query result.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "errors": {
            "description": "The errors that resulted from this query.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GraphQLErrorRepresentation"
            }
          }
        },
        "required": [
          "data",
          "errors"
        ]
      },
      "HealthCheckRepresentation": {
        "description": "api health check output",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "result": {
            "description": "Result.",
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      },
      "KeywordSearchRequestInputRepresentation": {
        "description": "Input parameters to request on Search for keyword type",
        "type": "object",
        "properties": {
          "configurationName": {
            "description": "A configuration name defined in Search Manager",
            "type": "string"
          },
          "filters": {
            "description": "Filters to apply on our results",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "pageSize": {
            "description": "Number of records to return",
            "type": "integer"
          },
          "pageToken": {
            "description": "Position into the record pagination",
            "type": "string"
          },
          "sortBy": {
            "description": "How to sort the results. You could, provide a 'FieldName for ascending sorting or '-FieldName' for descending sorting",
            "type": "string"
          }
        },
        "required": [
          "configurationName",
          "filters",
          "pageSize",
          "pageToken",
          "sortBy"
        ]
      },
      "KeywordSearchResultsRepresentation": {
        "description": "Keyword Search Results Response",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "results": {
            "description": "List of search result collections, one for each object",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultCollectionRepresentation"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "KeywordSearchResultsSummaryRepresentation": {
        "description": "Root of the keyword search response",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "configurationName": {
            "description": "Configuration Name to be applied",
            "type": "string"
          },
          "keywordSearchResult": {
            "description": "Search’s scoped result collection",
            "$ref": "#/components/schemas/SearchResultCollectionRepresentation"
          },
          "objectApiName": {
            "description": "Object API name.",
            "type": "string"
          },
          "query": {
            "description": "Search query that yielded the search results",
            "type": "string"
          },
          "queryId": {
            "description": "Search’s request ID",
            "type": "string"
          }
        },
        "required": [
          "configurationName",
          "keywordSearchResult",
          "objectApiName",
          "query",
          "queryId"
        ]
      },
      "LeadStatusPicklistValueAttributesRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractPicklistValueAttributesRepresentation"
          },
          {
            "description": "Additional picklist value attributes for lead statuses.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "converted": {
                "description": "True if this status indicates the lead has been converted, otherwise false. For more info, see the doc for the LeadStatus standard object.",
                "type": "boolean"
              }
            }
          }
        ],
        "type": "string"
      },
      "ListColumnInlineEditAttributesRepresentation": {
        "description": "ListColumnInlineEditAttributesRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "editable": {
            "description": "Indicates whether the column can be inline edited.",
            "type": "boolean"
          },
          "required": {
            "description": "Indicates whether the colum is required to be populated when inline editing.",
            "type": "boolean"
          }
        },
        "required": [
          "editable",
          "required"
        ]
      },
      "ListColumnRepresentation": {
        "description": "ListColumnRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldApiName": {
            "description": "API name for the field.",
            "type": "string"
          },
          "inlineEditAttributes": {
            "description": "Map of RecordTypeId -> inline edit attributes.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ListColumnInlineEditAttributesRepresentation"
            }
          },
          "label": {
            "description": "Label of the field.",
            "type": "string"
          },
          "lookupId": {
            "description": "The lookupId for the column when the field is a reference, otherwise null.",
            "type": "string"
          },
          "searchable": {
            "description": "Whether the list column is searchable.",
            "type": "boolean"
          },
          "sortable": {
            "description": "Whether the list column is sortable.",
            "type": "boolean"
          }
        },
        "required": [
          "fieldApiName",
          "inlineEditAttributes",
          "label",
          "lookupId",
          "searchable",
          "sortable"
        ]
      },
      "ListFieldErrorRepresentation": {
        "description": "ListFieldErrorRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "errorMessage": {
            "description": "Further information about the column's error.",
            "type": "string"
          },
          "fieldApiName": {
            "description": "API name for the field with an error.",
            "type": "string"
          }
        },
        "required": [
          "errorMessage",
          "fieldApiName"
        ]
      },
      "ListFilterByInfoInputRepresentation": {
        "description": "Representation of a List Filter By Info input.",
        "type": "object",
        "properties": {
          "fieldApiName": {
            "description": "Input representation for API name for the field used to filter.",
            "type": "string"
          },
          "operandLabels": {
            "description": "Input representation for the values to filter by.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operator": {
            "description": "Input representation for Operator (such as equals, starts with).",
            "enum": [
              "Contains",
              "Equals",
              "Excludes",
              "GreaterOrEqual",
              "GreaterThan",
              "Includes",
              "LessOrEqual",
              "LessThan",
              "NotContain",
              "NotEqual",
              "StartsWith",
              "Within"
            ],
            "type": "string"
          }
        },
        "required": [
          "fieldApiName",
          "operandLabels",
          "operator"
        ]
      },
      "ListFilterByInfoRepresentation": {
        "description": "ListFilterByInfoRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldApiName": {
            "description": "API name for the field used to filter.",
            "type": "string"
          },
          "label": {
            "description": "Label for the field used to filter.",
            "type": "string"
          },
          "operandLabels": {
            "description": "The values (or label if there is one) to filter by.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operator": {
            "description": "Operator such as equals, starts with.",
            "enum": [
              "Contains",
              "Equals",
              "Excludes",
              "GreaterOrEqual",
              "GreaterThan",
              "Includes",
              "LessOrEqual",
              "LessThan",
              "NotContain",
              "NotEqual",
              "StartsWith",
              "Within"
            ],
            "type": "string"
          }
        },
        "required": [
          "fieldApiName",
          "label",
          "operandLabels",
          "operator"
        ]
      },
      "ListInfoErrorRepresentation": {
        "description": "ListInfoErrorRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldErrors": {
            "description": "List of errors associated with specific fields.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListFieldErrorRepresentation"
            }
          }
        },
        "required": [
          "fieldErrors"
        ]
      },
      "ListInfoInputRepresentation": {
        "description": "Representation of a List Info input.",
        "type": "object",
        "properties": {
          "displayColumns": {
            "description": "Input representation for display columns (field API names).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filterLogicString": {
            "description": "Input representation for filterLogicString.",
            "type": "string"
          },
          "filteredByInfo": {
            "description": "Input representation for filter metadata.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "label": {
            "description": "Input representation for label.",
            "type": "string"
          },
          "listShares": {
            "description": "Input representation for shared entities (when Visibility is Shared).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scope": {
            "description": "Input representation for filterLogicString.",
            "type": "object"
          },
          "visibility": {
            "description": "Input representation for visibility.",
            "enum": [
              "Private",
              "Public",
              "Shared"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayColumns",
          "filterLogicString",
          "filteredByInfo",
          "label",
          "listShares",
          "scope",
          "visibility"
        ]
      },
      "ListInfoPostInputRepresentation": {
        "description": "Representation of a List Info input.",
        "type": "object",
        "properties": {
          "displayColumns": {
            "description": "Input representation for display columns (field API names).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filterLogicString": {
            "description": "Input representation for filterLogicString.",
            "type": "string"
          },
          "filteredByInfo": {
            "description": "Input representation for filter metadata.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "label": {
            "description": "Input representation for label.",
            "type": "string"
          },
          "listShares": {
            "description": "Input representation for shared entities (when Visibility is Shared).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "listViewApiName": {
            "description": "Input representation for listview API name.",
            "type": "string"
          },
          "scope": {
            "description": "Input representation for filterLogicString.",
            "type": "object"
          },
          "visibility": {
            "description": "Input representation for visibility.",
            "enum": [
              "Private",
              "Public",
              "Shared"
            ],
            "type": "string"
          }
        },
        "required": [
          "displayColumns",
          "filterLogicString",
          "filteredByInfo",
          "label",
          "listShares",
          "listViewApiName",
          "scope",
          "visibility"
        ]
      },
      "ListInfoRepresentation": {
        "description": "ListInfoRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "cloneable": {
            "description": "Indicates whether the listview can be cloned.",
            "type": "boolean"
          },
          "createable": {
            "description": "Indicates whether a new listview for this listview's SObject can be created.",
            "type": "boolean"
          },
          "deletable": {
            "description": "Indicates whether the listview can be deleted.",
            "type": "boolean"
          },
          "displayColumns": {
            "description": "All display columns for this list view.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListColumnRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "filterLogicString": {
            "description": "This is the filter logic such as \"(1 OR 2) and 3\".  Indexes are 1-based.",
            "type": "string"
          },
          "filteredByInfo": {
            "description": "Describes how the list view is filtered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListFilterByInfoRepresentation"
            }
          },
          "inlineEditDetails": {
            "description": "Inline edit information for this list view.",
            "$ref": "#/components/schemas/ListInlineEditDetailsRepresentation"
          },
          "label": {
            "description": "The list view's display label.  E.g. \"All Accounts\".",
            "type": "string"
          },
          "listReference": {
            "description": "An object representing the identity of the list.",
            "$ref": "#/components/schemas/ListReferenceRepresentation"
          },
          "listShares": {
            "description": "The items a list is shared with.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListInfoShareCategoryRepresentation"
            }
          },
          "objectApiNames": {
            "description": "The API name of any objects that are returned by this relatedList.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orderedByInfo": {
            "description": "Describes how records are ordered in this list view.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListOrderByInfoRepresentation"
            }
          },
          "scope": {
            "description": "Scope information for this list view.",
            "$ref": "#/components/schemas/ListScopeRepresentation"
          },
          "searchable": {
            "description": "Indicates whether the listview can be searched (SOSL).",
            "type": "boolean"
          },
          "updateable": {
            "description": "Indicates whether the listview can be updated.",
            "type": "boolean"
          },
          "userPreferences": {
            "description": "All user preferences for this list view.",
            "$ref": "#/components/schemas/ListUserPreferenceRepresentation"
          },
          "visibility": {
            "description": "The list view's visibility.",
            "enum": [
              "Private",
              "Public",
              "Shared"
            ],
            "type": "string"
          },
          "visibilityEditable": {
            "description": "Indicates whether the visibility of the listview can be edited.",
            "type": "boolean"
          }
        },
        "required": [
          "cloneable",
          "createable",
          "deletable",
          "displayColumns",
          "eTag",
          "filterLogicString",
          "filteredByInfo",
          "inlineEditDetails",
          "label",
          "listReference",
          "listShares",
          "objectApiNames",
          "orderedByInfo",
          "scope",
          "searchable",
          "updateable",
          "userPreferences",
          "visibility",
          "visibilityEditable"
        ]
      },
      "ListInfoShareCategoryRepresentation": {
        "description": "ListInfoShareCategoryRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "shareType": {
            "description": "The share type for this category",
            "enum": [
              "ChannelProgramGroup",
              "Regular",
              "Role",
              "RoleAndInternalSubordinates",
              "RoleAndSubordinates",
              "Territory",
              "TerritoryAndSubordinates"
            ],
            "type": "string"
          },
          "shares": {
            "description": "The list of shares in this category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListInfoShareRepresentation"
            }
          }
        },
        "required": [
          "shareType",
          "shares"
        ]
      },
      "ListInfoShareRepresentation": {
        "description": "ListInfoShareRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "label": {
            "description": "The label for this shared item.",
            "type": "string"
          },
          "shareApiName": {
            "description": "The API name for this shared item.",
            "type": "string"
          }
        },
        "required": [
          "label",
          "shareApiName"
        ]
      },
      "ListInfoSummaryCollectionRepresentation": {
        "description": "ListInfoSummaryCollectionRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "count": {
            "description": "The total count of list views returned.",
            "type": "integer"
          },
          "currentPageToken": {
            "description": "The pageToken of the current page of list views.",
            "type": "string"
          },
          "currentPageUrl": {
            "description": "The URL of the current page of list views.",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "lists": {
            "description": "Collection  of ListViewSummaryRepresentations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListInfoSummaryRepresentation"
            }
          },
          "nextPageToken": {
            "description": "The pageToken of the next page of list views.",
            "type": "string"
          },
          "nextPageUrl": {
            "description": "The URL of the next page of list views",
            "type": "string"
          },
          "objectApiName": {
            "description": "The objectApiName given in the URL.",
            "type": "string"
          },
          "pageSize": {
            "description": "The pageSize given in the query parameter.  If no pageSize is provided, this contains the default value used.",
            "type": "integer"
          },
          "previousPageToken": {
            "description": "The pageToken of the previous page of list views.",
            "type": "string"
          },
          "previousPageUrl": {
            "description": "The URL of the previous page of list views.",
            "type": "string"
          },
          "queryString": {
            "description": "The queryString given in the query parameter.  If no queryString is provided, this returns null.",
            "type": "string"
          },
          "recentListsOnly": {
            "description": "The recentListsOnly value from the query parameter.  If recentListsOnly is not provided, this returns the default value used (false).",
            "type": "boolean"
          }
        },
        "required": [
          "count",
          "currentPageToken",
          "currentPageUrl",
          "eTag",
          "lists",
          "nextPageToken",
          "nextPageUrl",
          "objectApiName",
          "pageSize",
          "previousPageToken",
          "previousPageUrl",
          "queryString",
          "recentListsOnly"
        ]
      },
      "ListInfoSummaryRepresentation": {
        "description": "ListInfoSummaryRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The list view's object API name.",
            "type": "string"
          },
          "id": {
            "description": "Id of the list view.",
            "type": "string"
          },
          "label": {
            "description": "List view's label.",
            "type": "string"
          },
          "url": {
            "description": "List view ui url.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "id",
          "label",
          "url"
        ]
      },
      "ListInlineEditDetailsRepresentation": {
        "description": "ListInlineEditDetailsRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "message": {
            "description": "The message describing why inline edit is Off",
            "type": "string"
          },
          "state": {
            "description": "The state of inline edit for this list view",
            "type": "string"
          }
        },
        "required": [
          "message",
          "state"
        ]
      },
      "ListObjectColumnRepresentation": {
        "description": "ListObjectColumnRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "alias": {
            "description": "The alias for this column.",
            "type": "string"
          },
          "dataType": {
            "description": "The data type for this column.",
            "enum": [
              "Address",
              "Anytype",
              "Base64",
              "Boolean",
              "ComboBox",
              "ComplexValue",
              "Currency",
              "Date",
              "DateTime",
              "Double",
              "Email",
              "EncryptedString",
              "Int",
              "JunctionIdList",
              "Location",
              "Long",
              "MultiPicklist",
              "Percent",
              "Phone",
              "Picklist",
              "Reference",
              "String",
              "TextArea",
              "Time",
              "Url"
            ],
            "type": "string"
          },
          "defaultFilterOperator": {
            "description": "The default filter operator for this column.",
            "enum": [
              "Contains",
              "Equals",
              "Excludes",
              "GreaterOrEqual",
              "GreaterThan",
              "Includes",
              "LessOrEqual",
              "LessThan",
              "NotContain",
              "NotEqual",
              "StartsWith",
              "Within"
            ],
            "type": "string"
          },
          "displayable": {
            "description": "Whether or not this column is displayable.",
            "type": "boolean"
          },
          "fieldApiName": {
            "description": "The field API name for this column.",
            "type": "string"
          },
          "filterable": {
            "description": "Whether or not this column is filterable.",
            "type": "boolean"
          },
          "label": {
            "description": "The label for this column.",
            "type": "string"
          },
          "picklistValues": {
            "description": "The list of allowed picklist values for this column.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListObjectPicklistValueRepresentation"
            }
          },
          "sortable": {
            "description": "Whether or not this column is sortable.",
            "type": "boolean"
          },
          "supportedFilterOperators": {
            "description": "The supported filter operators for this column.",
            "type": "array",
            "items": {
              "enum": [
                "Contains",
                "Equals",
                "Excludes",
                "GreaterOrEqual",
                "GreaterThan",
                "Includes",
                "LessOrEqual",
                "LessThan",
                "NotContain",
                "NotEqual",
                "StartsWith",
                "Within"
              ],
              "type": "string"
            }
          }
        },
        "required": [
          "alias",
          "dataType",
          "defaultFilterOperator",
          "displayable",
          "fieldApiName",
          "filterable",
          "label",
          "picklistValues",
          "sortable",
          "supportedFilterOperators"
        ]
      },
      "ListObjectInfoRepresentation": {
        "description": "ListObjectInfoRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "availableScopes": {
            "description": "Information about all available scopes for the given entity.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListObjectScopeRepresentation"
            }
          },
          "columns": {
            "description": "Information about all available columns for the given entity.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListObjectColumnRepresentation"
            }
          },
          "createable": {
            "description": "Indicates whether a new listview for this listview's SObject can be created.",
            "type": "boolean"
          },
          "objectApiName": {
            "description": "The requested object API name.",
            "type": "string"
          },
          "relatedEntityApiName": {
            "description": "Null, or the type of related entity to which this LV can be scoped.",
            "type": "string"
          }
        },
        "required": [
          "availableScopes",
          "columns",
          "createable",
          "objectApiName",
          "relatedEntityApiName"
        ]
      },
      "ListObjectPicklistValueRepresentation": {
        "description": "ListObjectPicklistValueRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The API name for this picklist value.",
            "type": "string"
          },
          "label": {
            "description": "The label name for this picklist value.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "label"
        ]
      },
      "ListObjectScopeAvailableEntityRepresentation": {
        "description": "ListObjectScopeAvailableEntityRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "The id for this scope.",
            "type": "string"
          },
          "label": {
            "description": "The label for this scope.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "ListObjectScopeRepresentation": {
        "description": "ListObjectScopeRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The API name for this scope.",
            "type": "string"
          },
          "availableEntities": {
            "description": "The available entities for this scope.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListObjectScopeAvailableEntityRepresentation"
            }
          },
          "label": {
            "description": "The label for this scope.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "availableEntities",
          "label"
        ]
      },
      "ListOrderByInfoRepresentation": {
        "description": "ListOrderByInfoRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldApiName": {
            "description": "API name for the field.",
            "type": "string"
          },
          "isAscending": {
            "description": "Whether the list column is ascending or descending.",
            "type": "boolean"
          },
          "label": {
            "description": "Localized label of the field.",
            "type": "string"
          }
        },
        "required": [
          "fieldApiName",
          "isAscending",
          "label"
        ]
      },
      "ListOrderedByInfoInputRepresentation": {
        "description": "Representation of a orderedBy Info input.",
        "type": "object",
        "properties": {
          "fieldApiName": {
            "description": "Field API name for orderedByInfo.",
            "type": "string"
          },
          "isAscending": {
            "description": "Boolean describing if the orderBy should be ascending.",
            "type": "boolean"
          }
        },
        "required": [
          "fieldApiName",
          "isAscending"
        ]
      },
      "ListPreferencesInputRepresentation": {
        "description": "Representation of a List Preferences input.",
        "type": "object",
        "properties": {
          "columnWidths": {
            "description": "Input representation for column widths.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "columnWrap": {
            "description": "Input representation for column wrap.",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "orderedBy": {
            "description": "Input representation for ordered by.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "columnWidths",
          "columnWrap",
          "orderedBy"
        ]
      },
      "ListPreferencesRepresentation": {
        "description": "ListPreferencesRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "columnWidths": {
            "description": "Column width preferences for the list.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "columnWrap": {
            "description": "Column wrapping preferences for the list.",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "listReference": {
            "description": "Reference information for the list.",
            "$ref": "#/components/schemas/ListReferenceRepresentation"
          },
          "orderedBy": {
            "description": "Ordering preference for the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListOrderByInfoRepresentation"
            }
          }
        },
        "required": [
          "columnWidths",
          "columnWrap",
          "listReference",
          "orderedBy"
        ]
      },
      "ListRecordCollectionRepresentation": {
        "description": "ListRecordCollectionRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "count": {
            "description": "The total count of records returned.",
            "type": "integer"
          },
          "currentPageToken": {
            "description": "The token for the current page of records.",
            "type": "string"
          },
          "currentPageUrl": {
            "description": "The URL of the current page of records.",
            "type": "string"
          },
          "fields": {
            "description": "The list of fields requested when these records were fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "listInfoETag": {
            "description": "ListInfo ETag.",
            "type": "string"
          },
          "listReference": {
            "description": "The reference to the list that contains these records.",
            "$ref": "#/components/schemas/ListReferenceRepresentation"
          },
          "nextPageToken": {
            "description": "The token for the next page of records.",
            "type": "string"
          },
          "nextPageUrl": {
            "description": "The URL of the next page of records",
            "type": "string"
          },
          "optionalFields": {
            "description": "The list of optional fields requested when these records were fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pageSize": {
            "description": "The page size requested when these records were fetched.",
            "type": "integer"
          },
          "previousPageToken": {
            "description": "The token for the previous page of records.",
            "type": "string"
          },
          "previousPageUrl": {
            "description": "The URL of the previous page of records.",
            "type": "string"
          },
          "records": {
            "description": "List data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordRepresentation"
            }
          },
          "searchTerm": {
            "description": "The searchTerm field requested when these records were fetched.",
            "type": "string"
          },
          "sortBy": {
            "description": "The sortBy field requested when these records were fetched.",
            "type": "string"
          }
        },
        "required": [
          "count",
          "currentPageToken",
          "currentPageUrl",
          "fields",
          "listInfoETag",
          "listReference",
          "nextPageToken",
          "nextPageUrl",
          "optionalFields",
          "pageSize",
          "previousPageToken",
          "previousPageUrl",
          "records",
          "searchTerm",
          "sortBy"
        ]
      },
      "ListRecordCollectionRepresentation212": {
        "description": "ListRecordCollectionRepresentation212",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        }
      },
      "ListRecordsInputRepresentation": {
        "description": "Query (using POST) for records in a list.",
        "type": "object",
        "properties": {
          "fields": {
            "description": "Additional fields queried for the records returned.  If the field is not available to the user, an error occurs.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optionalFields": {
            "description": "Additional fields queried for the records returned.  If the field is not available to the user, no error occurs and the field isn’t included in the records.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pageSize": {
            "description": "The number of list records viewed at one time.  The default value is 50. Value can be 1–2000.",
            "type": "integer"
          },
          "pageToken": {
            "description": "A token from a previous query that indicates the record where this query should begin.",
            "type": "string"
          },
          "sortBy": {
            "description": "The API name of the field the list view is sorted by.  If the name is preceded with -, the sort order is descending.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fields",
          "optionalFields",
          "pageSize",
          "pageToken",
          "sortBy"
        ]
      },
      "ListReferenceRepresentation": {
        "description": "ListReferenceRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "List view id.",
            "type": "string"
          },
          "listViewApiName": {
            "description": "The list view's api name.  E.g. \"AllAccounts\".",
            "type": "string"
          },
          "objectApiName": {
            "description": "Entity API name for list view.",
            "type": "string"
          },
          "type": {
            "description": "Type of the list view.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "listViewApiName",
          "objectApiName",
          "type"
        ]
      },
      "ListScopeEntityRepresentation": {
        "description": "ListScopeEntityRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "Id of the scope entity.",
            "type": "string"
          },
          "label": {
            "description": "Label for the scope entity.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "ListScopeInputRepresentation": {
        "description": "Representation of a list scope for input.",
        "type": "object",
        "properties": {
          "apiName": {
            "description": "Input representation for the scope's API name.",
            "type": "string"
          },
          "entityId": {
            "description": "Input representation for the scope's entity id.",
            "type": "string"
          },
          "relatedEntityId": {
            "description": "Input representation for the scope's related entity id.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "entityId",
          "relatedEntityId"
        ]
      },
      "ListScopeRelatedEntityRepresentation": {
        "description": "ListScopeRelatedEntityRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "Id of the scope entity.",
            "type": "string"
          },
          "label": {
            "description": "Label for the scope entity.",
            "type": "string"
          },
          "type": {
            "description": "Type for the scope entity.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "label",
          "type"
        ]
      },
      "ListScopeRepresentation": {
        "description": "ListScopeRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "API name for the scope.",
            "type": "string"
          },
          "entity": {
            "description": "Entity for the scope.",
            "$ref": "#/components/schemas/ListScopeEntityRepresentation"
          },
          "label": {
            "description": "Label for the scope.",
            "type": "string"
          },
          "relatedEntity": {
            "description": "Related entity for the scope.",
            "$ref": "#/components/schemas/ListScopeRelatedEntityRepresentation"
          }
        },
        "required": [
          "apiName",
          "entity",
          "label",
          "relatedEntity"
        ]
      },
      "ListUiRepresentation": {
        "description": "ListUiRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "info": {
            "description": "List info.",
            "$ref": "#/components/schemas/ListInfoRepresentation"
          },
          "records": {
            "description": "List data.",
            "$ref": "#/components/schemas/ListRecordCollectionRepresentation"
          }
        },
        "required": [
          "eTag",
          "info",
          "records"
        ]
      },
      "ListUiRepresentation212": {
        "description": "ListUiRepresentation212",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "eTag"
        ]
      },
      "ListUserPreferenceInputRepresentation": {
        "description": "Representation of user preferences info for a List.",
        "type": "object",
        "properties": {
          "columnWidths": {
            "description": "Column width preferences.  -1 indicates default width.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "columnWrap": {
            "description": "Column wrapping preferences.  True indicates text wrapping is enabled.",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        },
        "required": [
          "columnWidths",
          "columnWrap"
        ]
      },
      "ListUserPreferenceRepresentation": {
        "description": "ListUserPreferenceRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "columnWidths": {
            "description": "Column width preferences for the list view.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "columnWrap": {
            "description": "Column wrapping preferences for the list view.",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        },
        "required": [
          "columnWidths",
          "columnWrap"
        ]
      },
      "ListViewSummaryCollectionRepresentation": {
        "description": "ListView Summary Collection Representation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "count": {
            "description": "The total count of list views returned.",
            "type": "integer"
          },
          "currentPageToken": {
            "description": "The pageToken of the current page of list views.",
            "type": "string"
          },
          "currentPageUrl": {
            "description": "The URL of the current page of list views.",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "lists": {
            "description": "Collection  of ListViewSummaryRepresentations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListViewSummaryRepresentation"
            }
          },
          "nextPageToken": {
            "description": "The pageToken of the next page of list views.",
            "type": "string"
          },
          "nextPageUrl": {
            "description": "The URL of the next page of list views",
            "type": "string"
          },
          "objectApiName": {
            "description": "The objectApiName given in the URL.",
            "type": "string"
          },
          "pageSize": {
            "description": "The pageSize given in the query parameter.  If no pageSize is provided, this contains the default value used.",
            "type": "integer"
          },
          "previousPageToken": {
            "description": "The pageToken of the previous page of list views.",
            "type": "string"
          },
          "previousPageUrl": {
            "description": "The URL of the previous page of list views.",
            "type": "string"
          },
          "queryString": {
            "description": "The queryString given in the query parameter.  If no queryString is provided, this returns null.",
            "type": "string"
          },
          "recentListsOnly": {
            "description": "The recentListsOnly value from the query parameter.  If recentListsOnly is not provided, this returns the default value used (false).",
            "type": "boolean"
          }
        },
        "required": [
          "count",
          "currentPageToken",
          "currentPageUrl",
          "eTag",
          "lists",
          "nextPageToken",
          "nextPageUrl",
          "objectApiName",
          "pageSize",
          "previousPageToken",
          "previousPageUrl",
          "queryString",
          "recentListsOnly"
        ]
      },
      "ListViewSummaryRepresentation": {
        "description": "List View Summary Representation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The list view's object API name.",
            "type": "string"
          },
          "id": {
            "description": "Id of the list view.",
            "type": "string"
          },
          "label": {
            "description": "List view's label.",
            "type": "string"
          },
          "listUiUrl": {
            "description": "List view ui url.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "id",
          "label",
          "listUiUrl"
        ]
      },
      "LocationFieldRepresentation": {
        "description": "Represents a record field's complex location value.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "latitude": {
            "description": "Gets the latitude of the location. This value maybe null if both latitude and longitude are null.",
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "description": "Gets the longitude of the location. This value maybe null if both latitude and longitude are null.",
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "LookupMetadataRepresentation": {
        "description": "Search Lookups Metadata",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldApiName": {
            "description": "API name of the lookup field.",
            "type": "string"
          },
          "objectApiName": {
            "description": "API name of the lookup field source object.",
            "type": "string"
          },
          "secondaryField": {
            "description": "API name of the field used as a secondary display field.",
            "type": "string"
          },
          "targetInfo": {
            "description": "Per target entity metadata",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LookupMetadataTargetInfoRepresentation"
            }
          }
        },
        "required": [
          "fieldApiName",
          "objectApiName",
          "secondaryField",
          "targetInfo"
        ]
      },
      "LookupMetadataTargetInfoRepresentation": {
        "description": "Search Lookups target Metadata",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fullSearchInfo": {
            "description": "Full Search display layout and matching info",
            "$ref": "#/components/schemas/DisplayLayoutAndMatchingInfoRepresentation"
          },
          "objectApiName": {
            "description": "Object API name",
            "type": "string"
          },
          "suggestionsInfo": {
            "description": "Suggestions display layout and matching info",
            "$ref": "#/components/schemas/DisplayLayoutAndMatchingInfoRepresentation"
          }
        },
        "required": [
          "fullSearchInfo",
          "objectApiName",
          "suggestionsInfo"
        ]
      },
      "LookupPOSTRequestBodyRepresentation": {
        "description": "A lookup POST request body",
        "type": "object",
        "properties": {
          "sourceRecord": {
            "description": "The source record",
            "type": "object"
          }
        },
        "required": [
          "sourceRecord"
        ]
      },
      "LookupValuesRepresentation": {
        "description": "Search results for a given lookup field, organized by type.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "lookupResults": {
            "description": "Search results for a given lookup field, organized by type.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordCollectionRepresentation"
            }
          },
          "metadata": {
            "description": "Search metadata for a given lookup field, organized by type.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LookupMetadataRepresentation"
            }
          }
        },
        "required": [
          "lookupResults",
          "metadata"
        ]
      },
      "MatchRepresentation": {
        "description": "Representation of group of possible matches ",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "duplicateResultInfos": {
            "description": "Map of duplicate rule name to DuplicateResultInfo.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DuplicateResultInfoRepresentation"
            }
          },
          "objectApiName": {
            "description": "The object's API name.",
            "type": "string"
          },
          "recordIds": {
            "description": "List of RecordId's with matching rule.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "duplicateResultInfos",
          "objectApiName",
          "recordIds"
        ]
      },
      "MatchResultInfoRepresentation": {
        "description": "Match Result Info",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "recordIds": {
            "description": "List of recordIds matched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rule": {
            "description": "Name of Match rule.",
            "type": "string"
          }
        },
        "required": [
          "recordIds",
          "rule"
        ]
      },
      "MatchResultRepresentation": {
        "description": "Duplicate rule match.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "Object API name.",
            "type": "string"
          },
          "isAllowSave": {
            "description": "Indicates whether the duplicate rule will allow a duplicate to be saved.",
            "type": "boolean"
          },
          "matchRecordIds": {
            "description": "IDs of the matching records.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matchRule": {
            "description": "The developer name of the matching duplicate rule.",
            "type": "string"
          },
          "objectLabel": {
            "description": "Object label.",
            "type": "string"
          },
          "objectLabelPlural": {
            "description": "Object plural label.",
            "type": "string"
          },
          "themeInfo": {
            "description": "Theme info.",
            "$ref": "#/components/schemas/ThemeInfoRepresentation"
          }
        },
        "required": [
          "apiName",
          "isAllowSave",
          "matchRecordIds",
          "matchRule",
          "objectLabel",
          "objectLabelPlural",
          "themeInfo"
        ]
      },
      "MatchRuleRepresentation": {
        "description": "Match Rule for dedupe configuration ",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "matchEngine": {
            "description": "Name of Matching Engine.",
            "enum": [
              "ExactMatchEngine",
              "FuzzyMatchEngine"
            ],
            "type": "string"
          },
          "matchFields": {
            "description": "Fields used for current MatchRule.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "Name of the current MatchRule.",
            "type": "string"
          },
          "objectApiName": {
            "description": "Entity Type of Match Rule.",
            "type": "string"
          }
        },
        "required": [
          "eTag",
          "matchEngine",
          "matchFields",
          "name",
          "objectApiName"
        ]
      },
      "MatchingInfoRepresentation": {
        "description": "Search Lookups target matching info metadata",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "matchingFields": {
            "description": "Ordered list of fields to match on",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "matchingFields"
        ]
      },
      "NavItemInputRepresentation": {
        "description": "A navigation item.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The nav item's id.",
            "type": "string"
          },
          "label": {
            "description": "The nav item's label.",
            "type": "string"
          },
          "pageReference": {
            "description": "The nav item's page reference.",
            "type": "object"
          }
        },
        "required": [
          "id",
          "label",
          "pageReference"
        ]
      },
      "NavItemRepresentation": {
        "description": "Metadata for a navitem (tab)",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "availableInClassic": {
            "description": "Is this tab available for salesforce classic",
            "type": "boolean"
          },
          "availableInLightning": {
            "description": "Is this tab available for lightning",
            "type": "boolean"
          },
          "color": {
            "description": "Tab color of the tab",
            "type": "string"
          },
          "content": {
            "description": "Launch url for this tab",
            "type": "string"
          },
          "custom": {
            "description": "Boolean specifying if this tab is a custom tab",
            "type": "boolean"
          },
          "developerName": {
            "description": "Developer name of the tab",
            "type": "string"
          },
          "iconUrl": {
            "description": "URL for the tab icon",
            "type": "string"
          },
          "id": {
            "description": "ID of the nav item",
            "type": "string"
          },
          "itemType": {
            "description": "Nav menu item type",
            "type": "string"
          },
          "label": {
            "description": "Label of the tab",
            "type": "string"
          },
          "objectApiName": {
            "description": "Api name of the object corresponding to this tab",
            "type": "string"
          },
          "objectLabel": {
            "description": "The label of the associated object, if applicable.",
            "type": "string"
          },
          "objectLabelPlural": {
            "description": "The plural label of the associated object, if applicable.",
            "type": "string"
          },
          "pageReference": {
            "description": "Corresponding page reference for the nav item",
            "$ref": "#/components/schemas/PageReferenceRepresentation"
          },
          "standardType": {
            "description": "Standard type",
            "type": "string"
          }
        },
        "required": [
          "availableInClassic",
          "availableInLightning",
          "color",
          "content",
          "custom",
          "developerName",
          "iconUrl",
          "id",
          "itemType",
          "label",
          "objectApiName",
          "objectLabel",
          "objectLabelPlural",
          "pageReference",
          "standardType"
        ]
      },
      "NavItemsInputRepresentation": {
        "description": "An ordered list of nav items",
        "type": "object",
        "properties": {
          "navItems": {
            "description": "An ordered list of nav items",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "navItems"
        ]
      },
      "NavItemsRepresentation": {
        "description": "An ordered lists of nav items.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "currentPageUrl": {
            "description": "URL to the current page of nav items.",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "navItems": {
            "description": "An ordered list of nav items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavItemRepresentation"
            }
          },
          "nextPageUrl": {
            "description": "URL to the next page of of nav items.",
            "type": "string"
          }
        },
        "required": [
          "currentPageUrl",
          "eTag",
          "navItems",
          "nextPageUrl"
        ]
      },
      "ObjectInfoDirectoryEntryRepresentation": {
        "description": "Entry for an object info within the directory of objects.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The API name of the object info corresponding to this entry.",
            "type": "string"
          },
          "keyPrefix": {
            "description": "The key prefix for IDs of this object.",
            "type": "string"
          },
          "label": {
            "description": "The label of the object info corresponding to this entry.",
            "type": "string"
          },
          "labelPlural": {
            "description": "The plural label of the object info corresponding to this entry.",
            "type": "string"
          },
          "nameFields": {
            "description": "List of the API names of the fields used to identify the name field for standard and custom objects. Typically there is one name field per object, except where FirstName and LastName fields are used.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "objectInfoUrl": {
            "description": "The URL to retrieve the full object info corresponding to this entry.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "keyPrefix",
          "label",
          "labelPlural",
          "nameFields",
          "objectInfoUrl"
        ]
      },
      "ObjectInfoDirectoryRepresentation": {
        "description": "Directory of objects that can be used within UI API end-points.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "objects": {
            "description": "The object info entries corresponding to the objects that can be used within UI API.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectInfoDirectoryEntryRepresentation"
            }
          }
        },
        "required": [
          "objects"
        ]
      },
      "ObjectInfoRepresentation": {
        "description": "Object metadata.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The object API name.",
            "type": "string"
          },
          "associateEntityType": {
            "description": "If an associated entity type, the type of that association, otherwise null.",
            "type": "string"
          },
          "associateParentEntity": {
            "description": "If an associated entity type, the entity to which it is associated, otherwise null.",
            "type": "string"
          },
          "childRelationships": {
            "description": "Child relationships for the object.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildRelationshipRepresentation"
            }
          },
          "compactLayoutable": {
            "description": "Indicates whether the object can have compact layouts.",
            "type": "boolean"
          },
          "createable": {
            "description": "Indicates whether the object can be created.",
            "type": "boolean"
          },
          "custom": {
            "description": "Indicates whether the object is custom.",
            "type": "boolean"
          },
          "defaultRecordTypeId": {
            "description": "The ID for the default record type for this object, if any. Null if there is none, or only a master type.",
            "type": "string"
          },
          "deletable": {
            "description": "Indicates whether the object can be deleted.",
            "type": "boolean"
          },
          "dependentFields": {
            "description": "This is a nested map of field and its dependents. Fields that neither have any controllers nor dependents are not a part of this map",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "feedEnabled": {
            "description": "Indicates whether the object may have feeds.",
            "type": "boolean"
          },
          "fields": {
            "description": "A map of field API name to information about the field. This map only contains fields relevant to the requested layout and mode.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldRepresentation"
            }
          },
          "keyPrefix": {
            "description": "The key prefix for IDs of this object.",
            "type": "string"
          },
          "label": {
            "description": "The object display label.",
            "type": "string"
          },
          "labelPlural": {
            "description": "The plural form of the object display label.",
            "type": "string"
          },
          "layoutable": {
            "description": "Indicates whether the object can have a layout.",
            "type": "boolean"
          },
          "mruEnabled": {
            "description": "Indicates whether the object may appear in Most Recently Used lists.",
            "type": "boolean"
          },
          "nameFields": {
            "description": "List of the API names of the fields used to identify the name field for standard and custom objects. Typically there is one name field per object, except where FirstName and LastName fields are used.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "queryable": {
            "description": "Indicates whether the object can be queried by the context user.",
            "type": "boolean"
          },
          "recordTypeInfos": {
            "description": "A map of record type IDs to information about the record type. The user need not have access to all the returned record types to see them here.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordTypeInfoRepresentation"
            }
          },
          "searchLayoutable": {
            "description": "Indicates whether the object can have search layouts.",
            "type": "boolean"
          },
          "searchable": {
            "description": "Indicates whether the object can be searched.",
            "type": "boolean"
          },
          "themeInfo": {
            "description": "Theme information for the object.",
            "$ref": "#/components/schemas/ThemeInfoRepresentation"
          },
          "updateable": {
            "description": "Indicates whether the object can be updated.",
            "type": "boolean"
          }
        },
        "required": [
          "apiName",
          "associateEntityType",
          "associateParentEntity",
          "childRelationships",
          "compactLayoutable",
          "createable",
          "custom",
          "defaultRecordTypeId",
          "deletable",
          "dependentFields",
          "eTag",
          "feedEnabled",
          "fields",
          "keyPrefix",
          "label",
          "labelPlural",
          "layoutable",
          "mruEnabled",
          "nameFields",
          "queryable",
          "recordTypeInfos",
          "searchLayoutable",
          "searchable",
          "themeInfo",
          "updateable"
        ]
      },
      "OperationInputRepresentation": {
        "description": "An operation that can to be executed within aggregate",
        "type": "object",
        "properties": {
          "httpHeaders": {
            "description": "The HTTP headers of the operation to be executed",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "referenceId": {
            "description": "The ID of the operation that can be used in references",
            "type": "string"
          },
          "url": {
            "description": "The URL of the operation to executed",
            "type": "string"
          }
        },
        "required": [
          "httpHeaders",
          "referenceId",
          "url"
        ]
      },
      "OperationResponseRepresentation": {
        "description": "The output of an operation execution within aggregate.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "body": {
            "description": "The body of the operation",
            "type": "object"
          },
          "httpHeaders": {
            "description": "The HTTP headers of the operation",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "httpStatusCode": {
            "description": "The HTTP status code of the operation",
            "type": "integer"
          },
          "referenceId": {
            "description": "The ID that was given for the operation",
            "type": "string"
          },
          "url": {
            "description": "The url for the operation",
            "type": "string"
          }
        },
        "required": [
          "body",
          "httpHeaders",
          "httpStatusCode",
          "referenceId",
          "url"
        ]
      },
      "OpportunityStagePicklistValueAttributesRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractPicklistValueAttributesRepresentation"
          },
          {
            "description": "Additional picklist value attributes for opportunity stages.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "closed": {
                "description": "Indicates whether this opportunity stage value represents a closed opportunity. Multiple opportunity stage values can represent a closed opportunity. For more info, see the doc for the OpportunityStage standard object.",
                "type": "boolean"
              },
              "defaultProbability": {
                "description": "The default percentage estimate of the confidence in closing a specific opportunity for this opportunity stage value. May be null if forecasting is not enabled for the org. For more info, see the doc for the OpportunityStage standard object.",
                "type": "number",
                "format": "double"
              },
              "forecastCategoryName": {
                "description": "The default forecast category value for this opportunity stage value. May be null if forecasting is not enabled for the org. For more info, see the doc for the OpportunityStage standard object.",
                "type": "string"
              },
              "won": {
                "description": "Indicates whether this opportunity stage value represents a won opportunity. Multiple opportunity stage values can represent a won opportunity. For more info, see the doc for the OpportunityStage standard object.",
                "type": "boolean"
              }
            }
          }
        ],
        "type": "string"
      },
      "PageReferenceInputRepresentation": {
        "description": "A page reference.",
        "type": "object",
        "properties": {
          "attributes": {
            "description": "The page reference's attributes.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "state": {
            "description": "The page reference's state.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "type": {
            "description": "The page reference's type.",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "state",
          "type"
        ]
      },
      "PageReferenceRepresentation": {
        "description": "A page reference.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "attributes": {
            "description": "Values for each attribute specified by the PageDefinition.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "state": {
            "description": "Optional additional parameters that are not integral to the resolution of the reference.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "type": {
            "description": "API name of the corresponding PageDefinition.",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "state",
          "type"
        ]
      },
      "PerformActionInputRepresentation": {
        "description": "Description of an input for perform quick action.",
        "type": "object",
        "properties": {
          "allowSaveOnDuplicate": {
            "description": "Set allowSaveOnDuplicate param",
            "type": "boolean"
          },
          "apiName": {
            "description": "Object API name.",
            "type": "string"
          },
          "contextId": {
            "description": "The Context Id",
            "type": "string"
          },
          "fields": {
            "description": "Field values.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "allowSaveOnDuplicate",
          "apiName",
          "contextId",
          "fields"
        ]
      },
      "PhotoMetadataRepresentation": {
        "description": "Represents an metadata of an avatar associated to a record.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "companyBluemasterId": {
            "description": "The ID of the response that this avatar is associated to.",
            "type": "string"
          },
          "responseId": {
            "description": "The ID of the bluemasterID that this avatar is associated to.",
            "type": "string"
          }
        },
        "required": [
          "companyBluemasterId",
          "responseId"
        ]
      },
      "PhotoRecordAvatarRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordAvatarRepresentation"
          },
          {
            "description": "Represents an avatar associated to a Record",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "backgroundColor": {
                "description": "Retrieve the background color for the photo, if known, otherwise this will be null.",
                "type": "string"
              },
              "eTag": {
                "description": "ETag like field, readOnly, handy while caching.",
                "readOnly": true,
                "type": "string"
              },
              "height": {
                "description": "Retrieve the height of the photo in pixels, if known, otherwise this will be null.",
                "type": "integer",
                "format": "int64"
              },
              "photoMetadata": {
                "description": "The photo metadata for the image",
                "$ref": "#/components/schemas/PhotoMetadataRepresentation"
              },
              "photoUrl": {
                "description": "Retrieve the URL location of the photo.",
                "type": "string"
              },
              "provider": {
                "description": "The provider of the image",
                "type": "string"
              },
              "width": {
                "description": "Retrieve the width of the photo in pixels, if known, otherwise this will be null.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "type": "string"
      },
      "PicklistValueRepresentation": {
        "description": "A single picklist value.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "attributes": {
            "description": "For picklist values representing the status of a lead or an opportunity's stage, this value will contain additional attributes to help consumers understand the meaning of the value. Depending on the PicklistValueType this could be populated with information about a LeadStatus or an OpportunityStage. For any other PicklistValueType this property will be null.",
            "$ref": "#/components/schemas/AbstractPicklistValueAttributesRepresentation"
          },
          "label": {
            "description": "The displayable value of the picklist to use in a UI.",
            "type": "string"
          },
          "validFor": {
            "description": "If this picklist is a dependent picklist, this will be the controlling value indexes for which this value is valid. If this is an independent picklist, this list will be empty.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "value": {
            "description": "The value of the picklist to use in the API.",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "label",
          "validFor",
          "value"
        ]
      },
      "PicklistValuesCollectionRepresentation": {
        "description": "Picklist values for multiple picklist fields and scoped to a record type.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "picklistFieldValues": {
            "description": "This contains a map of fieldName to PicklistValuesRepresentation for all picklist fields. There would be no entry for non picklistFields in this map",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PicklistValuesRepresentation"
            }
          }
        },
        "required": [
          "eTag",
          "picklistFieldValues"
        ]
      },
      "PicklistValuesRepresentation": {
        "description": "Picklist values for a field and scoped to a record type.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "controllerValues": {
            "description": "If a picklist is an independent picklist, this map will be empty. If it is a dependent picklist, then this map will contain the following:\nControlling field is a picklist:\nPicklist value -> value index\nControlling field is a boolean:\nIf the controlling field is a boolean, then 0 will indicate false and 1 will indicate true. Values in the map will be:\n\"false\": 0\n\"true\": 1.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "defaultValue": {
            "description": "The default value for the picklist, or null if there isn't one.",
            "$ref": "#/components/schemas/PicklistValueRepresentation"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "A self-reference URL back to the API that can be used to retrieve this payload.",
            "type": "string"
          },
          "values": {
            "description": "A list of the applicable values for this object-record-type-field combination.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PicklistValueRepresentation"
            }
          }
        },
        "required": [
          "controllerValues",
          "defaultValue",
          "eTag",
          "url",
          "values"
        ]
      },
      "PlatformActionRepresentation": {
        "description": "Record.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "actionListContext": {
            "description": "PlatformActionContextEnum",
            "type": "string"
          },
          "actionTarget": {
            "description": "The URL to invoke or describe the action when the action is invoked. If the action is a standard button overridden by a Visualforce page, the ActionTarget returns the URL of the Visualforce page, such as /apex/pagename.",
            "type": "string"
          },
          "actionTargetType": {
            "description": "The type of the target when this action is triggered. Valid values are:Describe -- applies to actions with a user interface, such as quick actionsInvoke -- applies to actions with no user interface, such as action links or invocable actionsVisualforce -- applies to standard buttons overridden by a Visualforce page",
            "type": "string"
          },
          "apiName": {
            "description": "The action's object API name.",
            "type": "string"
          },
          "externalId": {
            "description": "The external Id contains the action assoicated info. For Quick Action, the format is: OrgId:SourceObject::Context:deviceFormat::QuickActionDefinitionId, i.e.:00Dxx0000001gGh:x01xx0000000007AAA::Record:Phone:09Dxx00000000B6For Standard Action,OrgId:SourceObject::Context:deviceFormat::StandardButton:ApiName",
            "type": "string"
          },
          "iconUrl": {
            "description": "The URL of the action’s icon image.",
            "type": "string"
          },
          "id": {
            "description": "The ID of this Platform Action Record.",
            "type": "string"
          },
          "isMassAction": {
            "description": "Whether the action is massAction.",
            "type": "string"
          },
          "label": {
            "description": "The label of the action.",
            "type": "string"
          },
          "lwcComponent": {
            "description": "LWC Component associated with the action",
            "type": "string"
          },
          "primaryColor": {
            "description": "Hex Color Code, such as 7F8DE1",
            "type": "string"
          },
          "relatedListRecordId": {
            "description": "Represents the ID of a record in an object’s related list.",
            "type": "string"
          },
          "relatedSourceObject": {
            "description": "When the ActionListContext is RelatedList or RelatedListRecord, this field represents the API name of the related list to which the action belongs.",
            "type": "string"
          },
          "section": {
            "description": "Which section the action appears in a page. The value can be: Page, ActivityComposer, CollaborateComposer, SingleActionLinks",
            "type": "string"
          },
          "sourceObject": {
            "description": "The object the action belongs to, either EntityApiName or recordId depending on the endpoints.",
            "type": "string"
          },
          "subtype": {
            "description": "The subtype of the action. For quick actions, the subtype is QuickActionType Enum value. For custom buttons, the subtype is WebLinkTypeEnum. For action links, subtypes are Api, ApiAsync, Download, and Ui. Standard buttons and productivity actions have no subtype.",
            "type": "string"
          },
          "targetObject": {
            "description": "Target Object for the action",
            "type": "string"
          },
          "targetUrl": {
            "description": "Target URL for Custom Button Actions",
            "type": "string"
          },
          "type": {
            "description": "The type of the action defined in PlatformActionTypeEnum",
            "type": "string"
          }
        },
        "required": [
          "actionListContext",
          "actionTarget",
          "actionTargetType",
          "apiName",
          "externalId",
          "iconUrl",
          "id",
          "isMassAction",
          "label",
          "lwcComponent",
          "primaryColor",
          "relatedListRecordId",
          "relatedSourceObject",
          "section",
          "sourceObject",
          "subtype",
          "targetObject",
          "targetUrl",
          "type"
        ]
      },
      "PrimingGeneratedModuleRepresentation": {
        "description": "Priming generated module information.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "adg": {
            "description": "Abstract dependency graph for the generated module.",
            "type": "string"
          },
          "descriptor": {
            "description": "Generated module descriptor.",
            "type": "string"
          }
        },
        "required": [
          "adg",
          "descriptor"
        ]
      },
      "QnASearchResultRepresentation": {
        "description": "Question and Answer Response",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "objectApiLabel": {
            "description": "The record’s object API label",
            "type": "string"
          },
          "objectApiName": {
            "description": "The record’s object API name",
            "type": "string"
          },
          "passage": {
            "description": "The record’s snippet which includes the answer",
            "type": "string"
          },
          "recordId": {
            "description": "The ID of the record",
            "type": "string"
          },
          "title": {
            "description": "The record’s title",
            "type": "string"
          }
        },
        "required": [
          "objectApiLabel",
          "objectApiName",
          "passage",
          "recordId",
          "title"
        ]
      },
      "QuickActionDefaultsRepresentation": {
        "description": "Quick action default values for a specific action api name",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "actionApiName": {
            "description": "quick action name",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "fields": {
            "description": "fields in the layout",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldValueRepresentation"
            }
          },
          "objectApiName": {
            "description": "object name",
            "type": "string"
          }
        },
        "required": [
          "actionApiName",
          "eTag",
          "fields",
          "objectApiName"
        ]
      },
      "QuickActionExecutionRepresentation": {
        "description": "Perform quick action response presentation.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "contextId": {
            "description": "The context ID",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "feedItemId": {
            "description": "The ID of created feed item as string.",
            "type": "string"
          },
          "id": {
            "description": "The ID of created or updated record as string.",
            "type": "string"
          },
          "isCreated": {
            "description": "Indicates if new records are created with the operation.",
            "type": "boolean"
          },
          "isSuccess": {
            "description": "Indicates if the operation is successful.",
            "type": "boolean"
          },
          "successMessage": {
            "description": "The success message of the operation.",
            "type": "string"
          }
        },
        "required": [
          "contextId",
          "eTag",
          "feedItemId",
          "id",
          "isCreated",
          "isSuccess",
          "successMessage"
        ]
      },
      "QuickActionLayoutRepresentation": {
        "description": "Quick action layout representation for a specific action api name",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "actionApiName": {
            "description": "quick action name",
            "type": "string"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "layout": {
            "description": "record layout representation",
            "$ref": "#/components/schemas/RecordLayoutRepresentation"
          }
        },
        "required": [
          "actionApiName",
          "eTag",
          "layout"
        ]
      },
      "RecordCollectionRepresentation": {
        "description": "Record Collection Representation.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "count": {
            "description": "The total count of records returned.",
            "type": "integer"
          },
          "currentPageToken": {
            "description": "The token of the current page of records.",
            "type": "string"
          },
          "currentPageUrl": {
            "description": "The URL of the current page of records.",
            "type": "string"
          },
          "nextPageToken": {
            "description": "The token of the next page of records.",
            "type": "string"
          },
          "nextPageUrl": {
            "description": "The URL of the next page of records",
            "type": "string"
          },
          "previousPageToken": {
            "description": "The token of the previous page of records.",
            "type": "string"
          },
          "previousPageUrl": {
            "description": "The URL of the previous page of records.",
            "type": "string"
          },
          "records": {
            "description": "Collection  of RecordRepresentations which the relation resolves to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordRepresentation"
            }
          }
        },
        "required": [
          "count",
          "currentPageToken",
          "currentPageUrl",
          "nextPageToken",
          "nextPageUrl",
          "previousPageToken",
          "previousPageUrl",
          "records"
        ]
      },
      "RecordDefaultsRepresentation": {
        "description": "Record defaults.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "layout": {
            "description": "Record layout.",
            "$ref": "#/components/schemas/RecordLayoutRepresentation"
          },
          "objectInfos": {
            "description": "Object metadata.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectInfoRepresentation"
            }
          },
          "record": {
            "description": "Pre-populated record data.",
            "$ref": "#/components/schemas/RecordRepresentation"
          }
        },
        "required": [
          "layout",
          "objectInfos",
          "record"
        ]
      },
      "RecordDefaultsTemplateCloneRepresentation": {
        "description": "Record defaults template for specifying record clone information and object information",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "objectInfos": {
            "description": "Object metadata.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectInfoRepresentation"
            }
          },
          "record": {
            "description": "Pre-populated record data.",
            "$ref": "#/components/schemas/RecordTemplateCloneRepresentation"
          }
        },
        "required": [
          "objectInfos",
          "record"
        ]
      },
      "RecordDefaultsTemplateCreateRepresentation": {
        "description": "Record defaults template for specifying record create information and object information",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "objectInfos": {
            "description": "Object metadata.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectInfoRepresentation"
            }
          },
          "record": {
            "description": "Pre-populated record data.",
            "$ref": "#/components/schemas/RecordTemplateCreateRepresentation"
          }
        },
        "required": [
          "objectInfos",
          "record"
        ]
      },
      "RecordExceptionErrorRepresentation": {
        "description": "Record exception error.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "constituentField": {
            "description": "Constituent field API name. May be null if no field applies. Usually matches field name but for compound fields will be the constituent field name.",
            "type": "string"
          },
          "duplicateRecordError": {
            "description": "Information about possible duplicate records. May be populated when the status code is DUPLICATES_DETECTED.",
            "$ref": "#/components/schemas/DuplicateRecordErrorRepresentation"
          },
          "errorCode": {
            "description": "Error status code.",
            "type": "string"
          },
          "field": {
            "description": "Field API name. May be null if no field applies.",
            "type": "string"
          },
          "fieldLabel": {
            "description": "Field label. May be null if no field applies.",
            "type": "string"
          },
          "message": {
            "description": "Error message.",
            "type": "string"
          }
        },
        "required": [
          "constituentField",
          "duplicateRecordError",
          "errorCode",
          "field",
          "fieldLabel",
          "message"
        ]
      },
      "RecordExceptionRepresentation": {
        "description": "Record exception.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "errors": {
            "description": "General errors.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordExceptionErrorRepresentation"
            }
          },
          "fieldErrors": {
            "description": "Field-specific errors.",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RecordExceptionErrorRepresentation"
              }
            }
          }
        },
        "required": [
          "errors",
          "fieldErrors"
        ]
      },
      "RecordIdRepresentation": {
        "description": "RecordId.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "The ID of this record.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "RecordInputRepresentation": {
        "description": "Description of a record input.",
        "type": "object",
        "properties": {
          "allowSaveOnDuplicate": {
            "description": "Set allowSaveOnDuplicate param",
            "type": "boolean"
          },
          "apiName": {
            "description": "Object API name.",
            "type": "string"
          },
          "fields": {
            "description": "Field values. When this representation is deserialized from JSON, the values will be typed as JsonNode, delaying full deserialization until the resource executes, which knows the expected data types. In the case of invocation through CiJ directly, the field values should be typed as the expected data types.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "allowSaveOnDuplicate",
          "apiName",
          "fields"
        ]
      },
      "RecordLayoutComponentRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
          },
          {
            "description": "Concrete record layout component.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            }
          }
        ],
        "type": "string"
      },
      "RecordLayoutItemRepresentation": {
        "description": "Record layout item.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "editableForNew": {
            "description": "Indicates whether the item may be edited on create.",
            "type": "boolean"
          },
          "editableForUpdate": {
            "description": "Indicates whether the item may be edited on update.",
            "type": "boolean"
          },
          "label": {
            "description": "Text label for the item.",
            "type": "string"
          },
          "layoutComponents": {
            "description": "Components that make up the item.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
            }
          },
          "lookupIdApiName": {
            "description": "TODO",
            "type": "string"
          },
          "required": {
            "description": "Indicates whether field is required in Layout",
            "type": "boolean"
          },
          "sortable": {
            "description": "Indicates whether the item is sortable.",
            "type": "boolean"
          }
        },
        "required": [
          "editableForNew",
          "editableForUpdate",
          "label",
          "layoutComponents",
          "lookupIdApiName",
          "required",
          "sortable"
        ]
      },
      "RecordLayoutRepresentation": {
        "description": "Record layout.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Layout ID.",
            "type": "string"
          },
          "layoutType": {
            "description": "Layout type.",
            "enum": [
              "Compact",
              "Full",
              "Mdp",
              "Search",
              "Service_Document"
            ],
            "type": "string"
          },
          "mode": {
            "description": "Mode.",
            "enum": [
              "Clone",
              "Create",
              "Edit",
              "View"
            ],
            "type": "string"
          },
          "objectApiName": {
            "description": "Object API name.",
            "type": "string"
          },
          "recordTypeId": {
            "description": "Record type ID.",
            "type": "string"
          },
          "saveOptions": {
            "description": "Layout save options.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLayoutSaveOptionRepresentation"
            }
          },
          "sections": {
            "description": "Layout sections.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLayoutSectionRepresentation"
            }
          }
        },
        "required": [
          "eTag",
          "id",
          "layoutType",
          "mode",
          "objectApiName",
          "recordTypeId",
          "saveOptions",
          "sections"
        ]
      },
      "RecordLayoutRowRepresentation": {
        "description": "Record layout row.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "layoutItems": {
            "description": "The items in this row, from left to right. Might not extend to the last column.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLayoutItemRepresentation"
            }
          }
        },
        "required": [
          "layoutItems"
        ]
      },
      "RecordLayoutSaveOptionRepresentation": {
        "description": "Record layout save option.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "defaultValue": {
            "description": "Default Value of the save option.",
            "type": "boolean"
          },
          "isDisplayed": {
            "description": "Is Displayed",
            "type": "boolean"
          },
          "label": {
            "description": "Label of the save option.",
            "type": "string"
          },
          "name": {
            "description": "Name of the save option.",
            "type": "string"
          },
          "restHeaderName": {
            "description": "Rest Header Name of the save option.",
            "type": "string"
          },
          "soapHeaderName": {
            "description": "Soap Header Name of the save option.",
            "type": "string"
          }
        },
        "required": [
          "defaultValue",
          "isDisplayed",
          "label",
          "name",
          "restHeaderName",
          "soapHeaderName"
        ]
      },
      "RecordLayoutSectionRepresentation": {
        "description": "Record layout section.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "collapsible": {
            "description": "Indicates whether the section may be collapsed.",
            "type": "boolean"
          },
          "columns": {
            "description": "Number of columns in the section.",
            "type": "integer"
          },
          "heading": {
            "description": "Heading text for the section.",
            "type": "string"
          },
          "id": {
            "description": "Section ID.",
            "type": "string"
          },
          "layoutRows": {
            "description": "The rows in the section.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLayoutRowRepresentation"
            }
          },
          "rows": {
            "description": "Number of rows in the section.",
            "type": "integer"
          },
          "useHeading": {
            "description": "Indicates whether the heading text is expected to be displayed.",
            "type": "boolean"
          }
        },
        "required": [
          "collapsible",
          "columns",
          "heading",
          "id",
          "layoutRows",
          "rows",
          "useHeading"
        ]
      },
      "RecordLayoutSectionUserStateInputRepresentation": {
        "description": "Represents the user state for a record layout section.",
        "type": "object",
        "properties": {
          "collapsed": {
            "description": "Indicates whether the section is collapsed.",
            "type": "boolean"
          }
        },
        "required": [
          "collapsed"
        ]
      },
      "RecordLayoutSectionUserStateRepresentation": {
        "description": "Record layout section user state.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "collapsed": {
            "description": "Indicates whether the section should initially be displayed as collapsed.",
            "type": "boolean"
          },
          "id": {
            "description": "Section ID.",
            "type": "string"
          }
        },
        "required": [
          "collapsed",
          "id"
        ]
      },
      "RecordLayoutUserStateInputRepresentation": {
        "description": "Represents the user state for a record layout.",
        "type": "object",
        "properties": {
          "sectionUserStates": {
            "description": "Indicates section user states to set. Keyed by section ID.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "sectionUserStates"
        ]
      },
      "RecordLayoutUserStateRepresentation": {
        "description": "Record layout user state.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "Layout ID.",
            "type": "string"
          },
          "sectionUserStates": {
            "description": "Section user states, keyed on section ID.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordLayoutSectionUserStateRepresentation"
            }
          }
        },
        "required": [
          "id",
          "sectionUserStates"
        ]
      },
      "RecordRepresentation": {
        "description": "Record.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The record's object API name.",
            "type": "string"
          },
          "childRelationships": {
            "description": "The child relationship data for this record",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordCollectionRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "fields": {
            "description": "The field data for this record, matching the requested layout and mode.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldValueRepresentation"
            }
          },
          "id": {
            "description": "The ID of this record.",
            "type": "string"
          },
          "lastModifiedById": {
            "description": "The lastModifiedById of the record.",
            "type": "string"
          },
          "lastModifiedDate": {
            "description": "The lastModifiedDate of the record.",
            "type": "string"
          },
          "recordTypeId": {
            "description": "The RecordTypeId of the record.",
            "type": "string"
          },
          "recordTypeInfo": {
            "description": "The record type info for this record, if any.",
            "$ref": "#/components/schemas/RecordTypeInfoRepresentation"
          },
          "systemModstamp": {
            "description": "The systemModstamp of the record.",
            "type": "string"
          },
          "weakEtag": {
            "description": "Record Version like field, readOnly, handy while caching and comparing versions of records.",
            "readOnly": true,
            "type": "integer"
          }
        },
        "required": [
          "apiName",
          "childRelationships",
          "eTag",
          "fields",
          "id",
          "lastModifiedById",
          "lastModifiedDate",
          "recordTypeId",
          "recordTypeInfo",
          "systemModstamp",
          "weakEtag"
        ]
      },
      "RecordTemplateCloneRepresentation": {
        "description": "Record template for specifying api name, fields, record typeinfo and recordtypeid information",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The record's object API name.",
            "type": "string"
          },
          "cloneSourceId": {
            "description": "The cloneSourceId of the record.",
            "type": "string"
          },
          "fields": {
            "description": "The field data for this record, matching the requested layout and mode.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldValueRepresentation"
            }
          },
          "recordTypeId": {
            "description": "The RecordTypeId of the record.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "cloneSourceId",
          "fields",
          "recordTypeId"
        ]
      },
      "RecordTemplateCreateRepresentation": {
        "description": "Record defaults create template for specifying api name, fields, record typeinfo and recordtypeid information",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The record's object API name.",
            "type": "string"
          },
          "fields": {
            "description": "The field data for this record, matching the requested layout and mode.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldValueRepresentation"
            }
          },
          "recordTypeId": {
            "description": "The RecordTypeId of the record.",
            "type": "string"
          }
        },
        "required": [
          "apiName",
          "fields",
          "recordTypeId"
        ]
      },
      "RecordTypeInfoRepresentation": {
        "description": "Record type.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "available": {
            "description": "Indicates whether this record type is available to the context user when creating a new record.",
            "type": "boolean"
          },
          "defaultRecordTypeMapping": {
            "description": "Indicates whether this is the default record type mapping for the associated object.",
            "type": "boolean"
          },
          "master": {
            "description": "Whether this is the master record type. The master record type is the default record type that’s used when a record has no custom record type associated with it.",
            "type": "boolean"
          },
          "name": {
            "description": "The record's object API name.",
            "type": "string"
          },
          "recordTypeId": {
            "description": "The ID of this record type.",
            "type": "string"
          }
        },
        "required": [
          "available",
          "defaultRecordTypeMapping",
          "master",
          "name",
          "recordTypeId"
        ]
      },
      "RecordUiRepresentation": {
        "description": "Record ui.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "layoutUserStates": {
            "description": "Map of layout ID -> user state.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordLayoutUserStateRepresentation"
            }
          },
          "layouts": {
            "description": "Record layout.",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/RecordLayoutRepresentation"
                  }
                }
              }
            }
          },
          "objectInfos": {
            "description": "Object metadata.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectInfoRepresentation"
            }
          },
          "records": {
            "description": "Record data.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RecordRepresentation"
            }
          }
        },
        "required": [
          "eTag",
          "layoutUserStates",
          "layouts",
          "objectInfos",
          "records"
        ]
      },
      "ReferenceToInfoRepresentation": {
        "description": "Information about a reference field's referenced types and the name field names of those types.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "apiName": {
            "description": "The object API name of a type being referenced in a relationship.",
            "type": "string"
          },
          "nameFields": {
            "description": "The names of the name fields for this object type. Combined with the relationship name, you can determine how to query this type's name fields, e.g. Parent.Name. Typically there is one name field per object, except where FirstName and LastName fields are used.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "apiName",
          "nameFields"
        ]
      },
      "RelatedListColumnRepresentation": {
        "description": "RelatedListColumnRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "dataType": {
            "description": "The type of the column.",
            "type": "string"
          },
          "fieldApiName": {
            "description": "API name for the field.",
            "type": "string"
          },
          "filterable": {
            "description": "Whether the list column is filterable.",
            "type": "boolean"
          },
          "label": {
            "description": "Label of the field.",
            "type": "string"
          },
          "lookupId": {
            "description": "The lookupId for the column when the field is a reference, otherwise null.",
            "type": "string"
          },
          "picklistValues": {
            "description": "The picklist values for this column (or null if the column is not a picklist).",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "quickFilterOperator": {
            "description": "The operator to use for quick filters on this column.",
            "type": "string"
          },
          "sortable": {
            "description": "Whether the list column is sortable.",
            "type": "boolean"
          }
        },
        "required": [
          "dataType",
          "fieldApiName",
          "filterable",
          "label",
          "lookupId",
          "picklistValues",
          "quickFilterOperator",
          "sortable"
        ]
      },
      "RelatedListInfoInputRepresentation": {
        "description": "Representation of a Related List Info input.",
        "type": "object",
        "properties": {
          "orderedByInfo": {
            "description": "Input representation for orderBy.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "userPreferences": {
            "description": "Input representation for user preferences.",
            "type": "object"
          }
        },
        "required": [
          "orderedByInfo",
          "userPreferences"
        ]
      },
      "RelatedListInfoRepresentation": {
        "description": "RelatedListInfoRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "cloneable": {
            "description": "Indicates whether the listview can be cloned.",
            "type": "boolean"
          },
          "createable": {
            "description": "Indicates whether a new listview for this listview's SObject can be created.",
            "type": "boolean"
          },
          "deletable": {
            "description": "Indicates whether the listview can be deleted.",
            "type": "boolean"
          },
          "displayColumns": {
            "description": "All display columns for this list view.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedListColumnRepresentation"
            }
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "fieldApiName": {
            "description": "The API name of the field in the child entity that links to the parent entity.",
            "type": "string"
          },
          "fields": {
            "description": "The list of fields requested when this metadata was fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filterLogicString": {
            "description": "This is the filter logic such as \"(1 OR 2) and 3\".  Indexes are 1-based.",
            "type": "string"
          },
          "filterable": {
            "description": "The value to determine quickFilter support on layout based RelatedLists",
            "type": "boolean"
          },
          "filteredByInfo": {
            "description": "Describes how the list view is filtered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListFilterByInfoRepresentation"
            }
          },
          "label": {
            "description": "The list view's display label.  E.g. \"All Accounts\".",
            "type": "string"
          },
          "listReference": {
            "description": "An object representing the identity of the list.",
            "$ref": "#/components/schemas/RelatedListReferenceRepresentation"
          },
          "objectApiNames": {
            "description": "The API name of any objects that are returned by this relatedList.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optionalFields": {
            "description": "The list of optional fields requested when this metadata was fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orderedByInfo": {
            "description": "Describes how records are ordered in this list view.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListOrderByInfoRepresentation"
            }
          },
          "restrictColumnsToLayout": {
            "description": "The value for getRestrictColumnsToLayout requested when this metadata was fetched.",
            "type": "boolean"
          },
          "updateable": {
            "description": "Indicates whether the listview can be updated.",
            "type": "boolean"
          },
          "userPreferences": {
            "description": "All user preferences for this list view.",
            "$ref": "#/components/schemas/ListUserPreferenceRepresentation"
          },
          "visibility": {
            "description": "The list view's visibility.",
            "enum": [
              "Private",
              "Public",
              "Shared"
            ],
            "type": "string"
          },
          "visibilityEditable": {
            "description": "Indicates whether the visibility of the listview can be edited.",
            "type": "boolean"
          }
        },
        "required": [
          "cloneable",
          "createable",
          "deletable",
          "displayColumns",
          "eTag",
          "fieldApiName",
          "fields",
          "filterLogicString",
          "filterable",
          "filteredByInfo",
          "label",
          "listReference",
          "objectApiNames",
          "optionalFields",
          "orderedByInfo",
          "restrictColumnsToLayout",
          "updateable",
          "userPreferences",
          "visibility",
          "visibilityEditable"
        ]
      },
      "RelatedListRecordCollectionRepresentation": {
        "description": "RelatedListRecordCollectionRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "count": {
            "description": "The total count of records returned.",
            "type": "integer"
          },
          "currentPageToken": {
            "description": "The token for the current page of records.",
            "type": "string"
          },
          "currentPageUrl": {
            "description": "The URL of the current page of records.",
            "type": "string"
          },
          "fields": {
            "description": "The list of fields requested when these records were fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "listInfoETag": {
            "description": "RelatedListInfo ETag.",
            "type": "string"
          },
          "listReference": {
            "description": "The reference to the related list that contains these records.",
            "$ref": "#/components/schemas/RelatedListReferenceRepresentation"
          },
          "nextPageToken": {
            "description": "The token for the next page of records.",
            "type": "string"
          },
          "nextPageUrl": {
            "description": "The URL of the next page of records",
            "type": "string"
          },
          "optionalFields": {
            "description": "The list of optional fields requested when these records were fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pageSize": {
            "description": "The page size requested when these records were fetched. The default value is 50.",
            "type": "integer"
          },
          "previousPageToken": {
            "description": "The token for the previous page of records.",
            "type": "string"
          },
          "previousPageUrl": {
            "description": "The URL of the previous page of records.",
            "type": "string"
          },
          "records": {
            "description": "Related list data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordRepresentation"
            }
          },
          "sortBy": {
            "description": "The sortBy field requested when these records were fetched.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "where": {
            "description": "The where condition requested when these records were fetched.",
            "type": "string"
          }
        },
        "required": [
          "count",
          "currentPageToken",
          "currentPageUrl",
          "fields",
          "listInfoETag",
          "listReference",
          "nextPageToken",
          "nextPageUrl",
          "optionalFields",
          "pageSize",
          "previousPageToken",
          "previousPageUrl",
          "records",
          "sortBy",
          "where"
        ]
      },
      "RelatedListRecordCountCollectionRepresentation": {
        "description": "RelatedListRecordCountCollectionRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "parentRecordId": {
            "description": "The parent record id requested by the caller.",
            "type": "string"
          },
          "relatedListNames": {
            "description": "The related list names requested by the caller.",
            "type": "string"
          },
          "results": {
            "description": "Collection of batch result items. One for each request input.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedListRecordCountRepresentation"
            }
          }
        },
        "required": [
          "eTag",
          "parentRecordId",
          "relatedListNames",
          "results"
        ]
      },
      "RelatedListRecordCountRepresentation": {
        "description": "RelatedListRecordCountRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "count": {
            "description": "How many items are in the given list.",
            "type": "integer"
          },
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "hasMore": {
            "description": "Are there more items than the provided count in the given list.",
            "type": "boolean"
          },
          "listReference": {
            "description": "An object representing the identity of the list.",
            "$ref": "#/components/schemas/RelatedListReferenceRepresentation"
          }
        },
        "required": [
          "count",
          "eTag",
          "hasMore",
          "listReference"
        ]
      },
      "RelatedListRecordsBatchInputRepresentation": {
        "description": "Query (using POST) for records in multiple related lists.",
        "type": "object",
        "properties": {
          "relatedListParameters": {
            "description": "Parameters for each of the related lists in this batch request.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "relatedListParameters"
        ]
      },
      "RelatedListRecordsInputRepresentation": {
        "description": "Query (using POST) for records in a related list.",
        "type": "object",
        "properties": {
          "fields": {
            "description": "Additional fields queried for the records returned.  If the field is not available to the user, an error occurs.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optionalFields": {
            "description": "Additional fields queried for the records returned.  If the field is not available to the user, no error occurs and the field isn’t included in the records.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pageSize": {
            "description": "The number of list records viewed at one time.  The default value is 50. Value can be 1–2000.",
            "type": "integer"
          },
          "pageToken": {
            "description": "A token from a previous query that indicates the record where this query should begin.",
            "type": "string"
          },
          "sortBy": {
            "description": "The API name of the field the list view is sorted by.  If the name is preceded with -, the sort order is descending.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "where": {
            "description": "Filter the records returned.  The value is in GraphQL syntax.",
            "type": "string"
          }
        },
        "required": [
          "fields",
          "optionalFields",
          "pageSize",
          "pageToken",
          "sortBy",
          "where"
        ]
      },
      "RelatedListRecordsSingleBatchInputRepresentation": {
        "description": "Query (using POST) for records in multiple related lists.",
        "type": "object",
        "properties": {
          "fields": {
            "description": "Additional fields queried for the records returned.  If the field is not available to the user, an error occurs.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optionalFields": {
            "description": "Additional fields queried for the records returned.  If the field is not available to the user, no error occurs and the field isn’t included in the records.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pageSize": {
            "description": "The number of list records viewed at one time.  The default value is 50. Value can be 1–2000.",
            "type": "integer"
          },
          "relatedListId": {
            "description": "The identifier for this related list.",
            "type": "string"
          },
          "sortBy": {
            "description": "The API name of the field the related list is sorted by.  If the name is preceded with -, the sort order is descending.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "where": {
            "description": "Filter the records returned.  The value is in GraphQL syntax.",
            "type": "string"
          }
        },
        "required": [
          "fields",
          "optionalFields",
          "pageSize",
          "relatedListId",
          "sortBy",
          "where"
        ]
      },
      "RelatedListReferenceRepresentation": {
        "description": "RelatedListReferenceRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "id": {
            "description": "List view id.",
            "type": "string"
          },
          "inContextOfRecordId": {
            "description": "The parent record for a related list.",
            "type": "string"
          },
          "listViewApiName": {
            "description": "The list view or related list api name.  E.g. \"AllAccounts\" for a listview or \"Contacts\" for a related list.",
            "type": "string"
          },
          "objectApiName": {
            "description": "Entity API name for list view.",
            "type": "string"
          },
          "parentObjectApiName": {
            "description": "The object API name for the parent of a related list.",
            "type": "string"
          },
          "recordTypeId": {
            "description": "The record type id for the parent of a related list.",
            "type": "string"
          },
          "relatedListId": {
            "description": "The id of the related list.",
            "type": "string"
          },
          "type": {
            "description": "Type of the list view.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "inContextOfRecordId",
          "listViewApiName",
          "objectApiName",
          "parentObjectApiName",
          "recordTypeId",
          "relatedListId",
          "type"
        ]
      },
      "RelatedListSummaryInfoCollectionRepresentation": {
        "description": "Information about a collection of related lists that all have the same parent type.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "parentObjectApiName": {
            "description": "The API name of the parent object.",
            "type": "string"
          },
          "parentRecordTypeId": {
            "description": "The record type id of the parent.",
            "type": "string"
          },
          "relatedLists": {
            "description": "Summary information about the related lists.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedListSummaryInfoRepresentation"
            }
          }
        },
        "required": [
          "eTag",
          "parentObjectApiName",
          "parentRecordTypeId",
          "relatedLists"
        ]
      },
      "RelatedListSummaryInfoRepresentation": {
        "description": "RelatedListSummaryInfoRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "entityLabel": {
            "description": "The label for this related list's entity.",
            "type": "string"
          },
          "entityPluralLabel": {
            "description": "The plural label for this related list's entity.",
            "type": "string"
          },
          "fieldApiName": {
            "description": "The API name of the field in the child entity that links to the parent entity.",
            "type": "string"
          },
          "keyPrefix": {
            "description": "The key prefix for IDs of the object that populates the list.  This can be null for some related lists.",
            "type": "string"
          },
          "label": {
            "description": "The label for the related list.",
            "type": "string"
          },
          "objectApiName": {
            "description": "The API name of the this object.",
            "type": "string"
          },
          "parentFieldApiName": {
            "description": "Points to the parent’s field name that provides the id.",
            "type": "string"
          },
          "relatedListId": {
            "description": "The id of the related list.",
            "type": "string"
          },
          "relatedListInfoUrl": {
            "description": "The URL to fetch the metadata for the related list.",
            "type": "string"
          },
          "themeInfo": {
            "description": "The theme info for this related list's entity.",
            "$ref": "#/components/schemas/ThemeInfoRepresentation"
          },
          "uiApiEnabledLayout": {
            "description": "True if the elements in the layout are supported in UI API.  This is a best effort calculation, and should not be relied upon to always be completely accurate.",
            "type": "boolean"
          }
        },
        "required": [
          "entityLabel",
          "entityPluralLabel",
          "fieldApiName",
          "keyPrefix",
          "label",
          "objectApiName",
          "parentFieldApiName",
          "relatedListId",
          "relatedListInfoUrl",
          "themeInfo",
          "uiApiEnabledLayout"
        ]
      },
      "RelatedListUserPreferencesInputRepresentation": {
        "description": "Representation of related list user preferences input.",
        "type": "object",
        "properties": {
          "columnWidths": {
            "description": "Column width preferences.  -1 indicates default width.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "columnWrap": {
            "description": "Column wrapping preferences.  True indicates text wrapping is enabled.",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "orderedBy": {
            "description": "Input representation for orderBy.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "columnWidths",
          "columnWrap",
          "orderedBy"
        ]
      },
      "RelatedListUserPreferencesRepresentation": {
        "description": "RelatedListUserPreferencesRepresentation",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "columnWidths": {
            "description": "Column width preferences for the related list.",
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "columnWrap": {
            "description": "Column wrapping preferences for the related list.",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "orderedBy": {
            "description": "Ordering preference for the related list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListOrderByInfoRepresentation"
            }
          },
          "preferencesId": {
            "description": "Preference id for these preferences.",
            "type": "string"
          }
        },
        "required": [
          "columnWidths",
          "columnWrap",
          "orderedBy",
          "preferencesId"
        ]
      },
      "ReportLayoutComponentRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
          },
          {
            "description": "Report record layout component.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "cacheData": {
                "description": "Cache data",
                "type": "boolean"
              },
              "error": {
                "description": "Error",
                "type": "string"
              },
              "filter": {
                "description": "Filter",
                "type": "string"
              },
              "hideOnError": {
                "description": "Hide on error",
                "type": "boolean"
              },
              "placeholder": {
                "description": "Placeholder",
                "type": "string"
              },
              "reportId": {
                "description": "Report ID",
                "type": "string"
              },
              "showTitle": {
                "description": "Show title",
                "type": "boolean"
              },
              "size": {
                "description": "Size",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "ResourceReferenceRepresentation": {
        "description": "Resource reference.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "categoryType": {
            "description": "Resource reference category type.",
            "enum": [
              "Global",
              "Template",
              "Transform",
              "UiApi"
            ],
            "type": "string"
          },
          "config": {
            "description": "Config.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "groupId": {
            "description": "Group ID.",
            "type": "string"
          },
          "name": {
            "description": "Name.",
            "type": "string"
          }
        },
        "required": [
          "categoryType",
          "config",
          "groupId",
          "name"
        ]
      },
      "SearchAnswersRecordRepresentation": {
        "description": "Record for Search Answers",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "objectApiLabel": {
            "description": "The record’s object API label",
            "type": "string"
          },
          "objectApiName": {
            "description": "The record’s object API name",
            "type": "string"
          },
          "recordId": {
            "description": "The ID of the record",
            "type": "string"
          },
          "title": {
            "description": "The record’s title",
            "type": "string"
          }
        },
        "required": [
          "objectApiLabel",
          "objectApiName",
          "recordId",
          "title"
        ]
      },
      "SearchAnswersResultRepresentation": {
        "description": "Search Answers Response",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "answerType": {
            "description": "The type of search answer",
            "type": "string"
          },
          "appliedFilters": {
            "description": "The list of applied filters.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppliedSearchFilterOutputRepresentation"
            }
          },
          "passage": {
            "description": "The record’s snippet which includes the answer",
            "type": "string"
          },
          "records": {
            "description": "The list of records for search answer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchAnswersRecordRepresentation"
            }
          }
        },
        "required": [
          "answerType",
          "appliedFilters",
          "passage",
          "records"
        ]
      },
      "SearchDataCategoryFilterDefinitionRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFilterDefinitionRepresentation"
          },
          {
            "description": "Data category filter definition",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "categories": {
                "description": "Possible values",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchFilterOptionRepresentation"
                }
              },
              "groupName": {
                "description": "Group name",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "SearchDataCategoryInputRepresentation": {
        "description": "Input parameters to apply data category filters of our results",
        "type": "object",
        "properties": {
          "groupName": {
            "description": "group name of the data category",
            "type": "string"
          },
          "operator": {
            "description": "Operator to use on the data category filter",
            "enum": [
              "Above",
              "AboveOrBelow",
              "At",
              "Below"
            ],
            "type": "string"
          },
          "values": {
            "description": "Values of the data categories",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "groupName",
          "operator",
          "values"
        ]
      },
      "SearchDataCategoryOutputRepresentation": {
        "description": "Search data category output response.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "groupName": {
            "description": "Group name of the data category applied",
            "type": "string"
          },
          "operator": {
            "description": "Operator for the data category",
            "enum": [
              "Above",
              "AboveOrBelow",
              "At",
              "Below"
            ],
            "type": "string"
          },
          "values": {
            "description": "Values applied for the data category",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "groupName",
          "operator",
          "values"
        ]
      },
      "SearchFieldFilterAttributesRepresentation": {
        "description": "Attributes of the different filters.",
        "type": "object",
        "discriminator": {
          "propertyName": "affordance"
        },
        "properties": {
          "affordance": {
            "description": "Target affordance for which properties will apply.",
            "enum": [
              "Autocomplete",
              "Range",
              "Select",
              "Text"
            ],
            "type": "string"
          }
        },
        "required": [
          "affordance"
        ]
      },
      "SearchFieldFilterDefinitionRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFilterDefinitionRepresentation"
          },
          {
            "description": "Field filter definition",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "affordance": {
                "description": "The affordance name that displays the filter",
                "enum": [
                  "Autocomplete",
                  "Range",
                  "Select",
                  "Text"
                ],
                "type": "string"
              },
              "attributes": {
                "description": "Api name of the object with filter field",
                "$ref": "#/components/schemas/SearchFieldFilterAttributesRepresentation"
              },
              "targetFieldPath": {
                "description": "The field's path targeted by this filter. Examples: CaseNumber, Account.ParentId",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "SearchFieldFilterSelectAttributesRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldFilterAttributesRepresentation"
          },
          {
            "description": "Attributes for Select affordances.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "isStatic": {
                "description": "Indicates if this select has static options.",
                "type": "boolean"
              },
              "minNumValues": {
                "description": "Indicates how many values are required. By default: 0",
                "type": "integer"
              },
              "multiple": {
                "description": "Indicates if this select allows multiple values selection",
                "type": "boolean"
              },
              "staticOptions": {
                "description": "Static options that will populate the select filter.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SearchFilterOptionRepresentation"
                }
              }
            }
          }
        ],
        "type": "string"
      },
      "SearchFieldFilterTextAttributesRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchFieldFilterAttributesRepresentation"
          },
          {
            "description": "Attributes for Text affordances.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "placeholder": {
                "description": "Placeholder to default the text affordance.",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "SearchFilterDefinitionRepresentation": {
        "description": "Definition of the different filters.",
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "defaultValues": {
            "description": "List of default values",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "helpMessage": {
            "description": "An optional help message.",
            "type": "string"
          },
          "label": {
            "description": "The filter display label.",
            "type": "string"
          },
          "type": {
            "description": "Type of the definition filter",
            "enum": [
              "DataCategory",
              "Field"
            ],
            "type": "string"
          }
        },
        "required": [
          "defaultValues",
          "helpMessage",
          "label",
          "type"
        ]
      },
      "SearchFilterInputRepresentation": {
        "description": "Input parameters to pilot filtering of our results",
        "type": "object",
        "properties": {
          "fieldPath": {
            "description": "Field path where we should apply the filter",
            "type": "string"
          },
          "objectApiName": {
            "description": "Object where we should apply the filter",
            "type": "string"
          },
          "operator": {
            "description": "Operator to use on the <objectapiName,fieldPath>",
            "enum": [
              "Eq",
              "Excludes",
              "Gt",
              "Gte",
              "In",
              "Includes",
              "Like",
              "Lt",
              "Lte",
              "Ne",
              "Nin"
            ],
            "type": "string"
          },
          "values": {
            "description": "Values of the filter",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "fieldPath",
          "objectApiName",
          "operator",
          "values"
        ]
      },
      "SearchFilterMetadataCollectionRepresentation": {
        "description": "Search filter metadata response.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "channel": {
            "description": "Additional channel associated to the object.",
            "type": "string"
          },
          "filters": {
            "description": "List of filter definitions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchFilterDefinitionRepresentation"
            }
          },
          "objectApiName": {
            "description": "Api name of the object associated to the metadata.",
            "type": "string"
          }
        },
        "required": [
          "channel",
          "filters",
          "objectApiName"
        ]
      },
      "SearchFilterOptionCollectionRepresentation": {
        "description": "Search filter options response.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "filterApiName": {
            "description": "Api name of the filter field to get filter options.",
            "type": "string"
          },
          "objectApiName": {
            "description": "Api name of the object with filter field",
            "type": "string"
          },
          "options": {
            "description": "List of search filter options to be displayed in the filter field.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchFilterOptionRepresentation"
            }
          },
          "query": {
            "description": "Search query that yielded the search results",
            "type": "string"
          }
        },
        "required": [
          "filterApiName",
          "objectApiName",
          "options",
          "query"
        ]
      },
      "SearchFilterOptionRepresentation": {
        "description": "Individual Search Filter option.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "label": {
            "description": "Display label for the search filter option.",
            "type": "string"
          },
          "value": {
            "description": "Value of the search filter option.",
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "SearchFilterOutputRepresentation": {
        "description": "Search filter output response.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fieldPath": {
            "description": "Field path where we should apply the filter",
            "type": "string"
          },
          "operator": {
            "description": "Operator for the filter",
            "enum": [
              "Eq",
              "Excludes",
              "Gt",
              "Gte",
              "In",
              "Includes",
              "Like",
              "Lt",
              "Lte",
              "Ne",
              "Nin"
            ],
            "type": "string"
          },
          "values": {
            "description": "Values applied for the filter",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fieldPath",
          "operator",
          "values"
        ]
      },
      "SearchObjectOptionsOutputRepresentation": {
        "description": "search object options like filters and data categories",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "dataCategories": {
            "description": "List of Data categories applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchDataCategoryOutputRepresentation"
            }
          },
          "filters": {
            "description": "List of filters applied",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchFilterOutputRepresentation"
            }
          }
        },
        "required": [
          "dataCategories",
          "filters"
        ]
      },
      "SearchObjectOptionsRepresentation": {
        "description": "Input parameters for search object options",
        "type": "object",
        "properties": {
          "dataCategories": {
            "description": "Data Categories to apply on our results",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "filters": {
            "description": "Filters to apply on our results",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "dataCategories",
          "filters"
        ]
      },
      "SearchRecordHighlightRepresentation": {
        "description": "Record-level search information",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fields": {
            "description": "Map of fields with the highlighting",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "snippet": {
            "description": "Message to represent the record where we highlight some terms",
            "type": "string"
          }
        },
        "required": [
          "fields",
          "snippet"
        ]
      },
      "SearchRecordInfoRepresentation": {
        "description": "Record-level search information",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "isPromoted": {
            "description": "Is the record promoted?",
            "type": "boolean"
          },
          "isSpellCorrected": {
            "description": "Did we find the record by applying the spell correction?",
            "type": "boolean"
          }
        },
        "required": [
          "isPromoted",
          "isSpellCorrected"
        ]
      },
      "SearchRequestInputRepresentation": {
        "description": "Input parameters to request on Search",
        "type": "object",
        "properties": {
          "answerTypes": {
            "description": "The accepted answer types",
            "type": "array",
            "items": {
              "enum": [
                "KeywordSearchResults",
                "QnAResult"
              ],
              "type": "string"
            }
          },
          "configurationName": {
            "description": "A configuration name defined in Search Manager",
            "type": "string"
          },
          "objectApiNames": {
            "description": "A list of supported objects, such as Account.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "searchObjectOptions": {
            "description": "A map of search objects to pass additional options like explicit filters",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "required": [
          "answerTypes",
          "configurationName",
          "objectApiNames",
          "searchObjectOptions"
        ]
      },
      "SearchResultCollectionRepresentation": {
        "description": "Search results for one object",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "currentPageToken": {
            "description": "The token of the current page of records.",
            "type": "string"
          },
          "error": {
            "description": "Error description if we were not able to load the records on the object",
            "$ref": "#/components/schemas/ErrorMessageRepresentation"
          },
          "nextPageToken": {
            "description": "The token of the next page of records.",
            "type": "string"
          },
          "objectApiName": {
            "description": "Object API name.",
            "type": "string"
          },
          "orderBy": {
            "description": "The sortBy field requested when these records were fetched.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListOrderByInfoRepresentation"
            }
          },
          "pageSize": {
            "description": "The pageSize given in the query parameter.  If no pageSize is provided, this contains the default value used.",
            "type": "integer"
          },
          "previousPageToken": {
            "description": "The token of the previous page of records.",
            "type": "string"
          },
          "records": {
            "description": "List of records with search metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultRepresentation"
            }
          },
          "relatedObjectApiNames": {
            "description": "Which objects are associated to the current object based on the Search layout. (e.g. Contacts with Contact.Account.Name)",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "currentPageToken",
          "error",
          "nextPageToken",
          "objectApiName",
          "orderBy",
          "pageSize",
          "previousPageToken",
          "records",
          "relatedObjectApiNames"
        ]
      },
      "SearchResultRepresentation": {
        "description": "Record with search metadata",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "highlightInfo": {
            "description": "Related search highlight",
            "$ref": "#/components/schemas/SearchRecordHighlightRepresentation"
          },
          "record": {
            "description": "Record found in Search",
            "$ref": "#/components/schemas/RecordRepresentation"
          },
          "searchInfo": {
            "description": "Related search info",
            "$ref": "#/components/schemas/SearchRecordInfoRepresentation"
          }
        },
        "required": [
          "highlightInfo",
          "record",
          "searchInfo"
        ]
      },
      "SearchResultsSummaryRepresentation": {
        "description": "Root of the search response",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "configurationName": {
            "description": "Configuration Name to be applied",
            "type": "string"
          },
          "keywordSearchResults": {
            "description": "Keyword Search Results Response",
            "$ref": "#/components/schemas/KeywordSearchResultsRepresentation"
          },
          "qnaResult": {
            "description": "Search Answers Response",
            "$ref": "#/components/schemas/SearchAnswersResultRepresentation"
          },
          "query": {
            "description": "Search query that yielded the search results",
            "type": "string"
          },
          "queryId": {
            "description": "Search’s request ID",
            "type": "string"
          },
          "searchObjectOptions": {
            "description": "Search object options applied",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SearchObjectOptionsOutputRepresentation"
            }
          }
        },
        "required": [
          "configurationName",
          "keywordSearchResults",
          "qnaResult",
          "query",
          "queryId",
          "searchObjectOptions"
        ]
      },
      "SimplifiedBatchRepresentation": {
        "description": "Result of an entire batch request operation. Results are ordered in the same order in which the requests were given. Results may either be a successful result with a response body, a successful result without a response body, or an error result without a response body. Success and error are determined by the status code in each result.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "results": {
            "description": "Collection of batch result items. One for each request input.",
            "type": "object"
          }
        },
        "required": [
          "results"
        ]
      },
      "ThemeBannerRepresentation": {
        "description": "A representation of a theme banner image.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "fullSizeUrl": {
            "description": "The url of the banner image",
            "type": "string"
          }
        },
        "required": [
          "fullSizeUrl"
        ]
      },
      "ThemeImageRepresentation": {
        "description": "A representation of a theme image.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "largeUrl": {
            "description": "The url of the large image.",
            "type": "string"
          },
          "mediumUrl": {
            "description": "The url of the medium image.",
            "type": "string"
          },
          "smallUrl": {
            "description": "The url of the small image.",
            "type": "string"
          }
        },
        "required": [
          "largeUrl",
          "mediumUrl",
          "smallUrl"
        ]
      },
      "ThemeInfoRepresentation": {
        "description": "Theme info.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "color": {
            "description": "Color.",
            "type": "string"
          },
          "iconUrl": {
            "description": "Icon URL.",
            "type": "string"
          }
        },
        "required": [
          "color",
          "iconUrl"
        ]
      },
      "ThemeRecordAvatarRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordAvatarRepresentation"
          },
          {
            "description": "Represents an avatar associated to a Record",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "backgroundColor": {
                "description": "Retrieve the background color for the theme as a six-letter hexidecimal value.",
                "type": "string"
              },
              "eTag": {
                "description": "ETag like field, readOnly, handy while caching.",
                "readOnly": true,
                "type": "string"
              },
              "iconUrl": {
                "description": "The URL of the image for the icon.",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "ThemeRepresentation": {
        "description": "A representation of a theme.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "brandColor": {
            "description": "Brand color of the theme.",
            "type": "string"
          },
          "brandImage": {
            "description": "Brand image of the theme.",
            "$ref": "#/components/schemas/ThemeImageRepresentation"
          },
          "defaultGroupBanner": {
            "description": "Default group banner of the theme.",
            "$ref": "#/components/schemas/ThemeBannerRepresentation"
          },
          "defaultGroupImage": {
            "description": "Default group image of the theme.",
            "$ref": "#/components/schemas/ThemeImageRepresentation"
          },
          "defaultPageBanner": {
            "description": "Default page banner of the theme.",
            "$ref": "#/components/schemas/ThemeBannerRepresentation"
          },
          "defaultUserBanner": {
            "description": "Default user banner of the theme.",
            "$ref": "#/components/schemas/ThemeBannerRepresentation"
          },
          "defaultUserImage": {
            "description": "Default user image of the theme.",
            "$ref": "#/components/schemas/ThemeImageRepresentation"
          },
          "density": {
            "description": "Current Density settings",
            "enum": [
              "ViewOne",
              "ViewTwo"
            ],
            "type": "string"
          },
          "headerColor": {
            "description": "Header color of the theme.",
            "type": "string"
          },
          "linkColor": {
            "description": "Link color of the theme.",
            "type": "string"
          },
          "pageColor": {
            "description": "Page color of the theme.",
            "type": "string"
          }
        },
        "required": [
          "brandColor",
          "brandImage",
          "defaultGroupBanner",
          "defaultGroupImage",
          "defaultPageBanner",
          "defaultUserBanner",
          "defaultUserImage",
          "density",
          "headerColor",
          "linkColor",
          "pageColor"
        ]
      },
      "ValidationRuleRepresentation": {
        "description": "Validation rule metadata.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "errorDisplayField": {
            "description": "Field in which error message needs to be displayed",
            "type": "string"
          },
          "errorMessage": {
            "description": "Message to be displayed when this validation rule fails",
            "type": "string"
          },
          "formulaJavascript": {
            "description": "Javascript equivalent of the validation rule formula",
            "type": "string"
          },
          "formulaReferences": {
            "description": "List of api names of reference fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "description": "Id of the validation rule",
            "type": "string"
          },
          "name": {
            "description": "Unique name of the rule",
            "type": "string"
          }
        },
        "required": [
          "eTag",
          "errorDisplayField",
          "errorMessage",
          "formulaJavascript",
          "formulaReferences",
          "id",
          "name"
        ]
      },
      "ValidationRulesRepresentation": {
        "description": "Validation rules metadata.",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "eTag": {
            "description": "ETag like field, readOnly, handy while caching.",
            "readOnly": true,
            "type": "string"
          },
          "rules": {
            "description": "List of validation rules for an entity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationRuleRepresentation"
            }
          }
        },
        "required": [
          "eTag",
          "rules"
        ]
      },
      "VisualforceLayoutComponentRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractRecordLayoutComponentRepresentation"
          },
          {
            "description": "Visualforce record layout component.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "height": {
                "description": "Height",
                "type": "string"
              },
              "showLabel": {
                "description": "Indicates whether to show the section label with this VF component.",
                "type": "boolean"
              },
              "showScroll": {
                "description": "Show scroll",
                "type": "boolean"
              },
              "visualforceUrl": {
                "description": "Visualforce URL.",
                "type": "string"
              },
              "width": {
                "description": "Width",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      },
      "WireDataRepresentation": {
        "description": "wire data representation for priming LDS",
        "type": "object",
        "discriminator": {
          "propertyName": ""
        },
        "properties": {
          "operationResponseRepresentation": {
            "description": "wire data.",
            "$ref": "#/components/schemas/OperationResponseRepresentation"
          },
          "resourceReference": {
            "description": "inputs to the wire.",
            "$ref": "#/components/schemas/ResourceReferenceRepresentation"
          },
          "valueType": {
            "description": "wire data value type.",
            "type": "string"
          }
        },
        "required": [
          "operationResponseRepresentation",
          "resourceReference",
          "valueType"
        ]
      },
      "WorkStepPicklistValueAttributeRepresentation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractPicklistValueAttributesRepresentation"
          },
          {
            "description": "Additional picklist value attributes for WorkStep statuses.",
            "type": "object",
            "discriminator": {
              "propertyName": ""
            },
            "properties": {
              "sortOrder": {
                "description": "Indicate the order in which the work step statuses are displayed in the status category's picklist. For more info, see the doc for the WorkStepStatus standard object",
                "type": "integer"
              },
              "statusCode": {
                "description": "Indicate the status category that this status belongs to. For more info, see the doc for the WorkStepStatus standard object",
                "type": "string"
              }
            }
          }
        ],
        "type": "string"
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {},
    "headers": {},
    "securitySchemes": {},
    "links": {},
    "callbacks": {}
  }
}